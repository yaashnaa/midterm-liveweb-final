{"ast":null,"code":"import { Socket as Engine, installTimerFunctions, nextTick } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n  constructor(uri, opts) {\n    var _a;\n\n    super();\n    this.nsps = {};\n    this.subs = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    this.opts = opts;\n    installTimerFunctions(this, opts);\n    this.reconnection(opts.reconnection !== false);\n    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n    this.backoff = new Backoff({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    });\n    this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    this._readyState = \"closed\";\n    this.uri = uri;\n\n    const _parser = opts.parser || parser;\n\n    this.encoder = new _parser.Encoder();\n    this.decoder = new _parser.Decoder();\n    this._autoConnect = opts.autoConnect !== false;\n    if (this._autoConnect) this.open();\n  }\n\n  reconnection(v) {\n    if (!arguments.length) return this._reconnection;\n    this._reconnection = !!v;\n    return this;\n  }\n\n  reconnectionAttempts(v) {\n    if (v === undefined) return this._reconnectionAttempts;\n    this._reconnectionAttempts = v;\n    return this;\n  }\n\n  reconnectionDelay(v) {\n    var _a;\n\n    if (v === undefined) return this._reconnectionDelay;\n    this._reconnectionDelay = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n    return this;\n  }\n\n  randomizationFactor(v) {\n    var _a;\n\n    if (v === undefined) return this._randomizationFactor;\n    this._randomizationFactor = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n    return this;\n  }\n\n  reconnectionDelayMax(v) {\n    var _a;\n\n    if (v === undefined) return this._reconnectionDelayMax;\n    this._reconnectionDelayMax = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n    return this;\n  }\n\n  timeout(v) {\n    if (!arguments.length) return this._timeout;\n    this._timeout = v;\n    return this;\n  }\n  /**\n   * Starts trying to reconnect if reconnection is enabled and we have not\n   * started reconnecting yet\n   *\n   * @private\n   */\n\n\n  maybeReconnectOnOpen() {\n    // Only try to reconnect if it's the first time we're connecting\n    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n      // keeps reconnection from firing twice for the same reconnection loop\n      this.reconnect();\n    }\n  }\n  /**\n   * Sets the current transport `socket`.\n   *\n   * @param {Function} fn - optional, callback\n   * @return self\n   * @public\n   */\n\n\n  open(fn) {\n    if (~this._readyState.indexOf(\"open\")) return this;\n    this.engine = new Engine(this.uri, this.opts);\n    const socket = this.engine;\n    const self = this;\n    this._readyState = \"opening\";\n    this.skipReconnect = false; // emit `open`\n\n    const openSubDestroy = on(socket, \"open\", function () {\n      self.onopen();\n      fn && fn();\n    });\n\n    const onError = err => {\n      this.cleanup();\n      this._readyState = \"closed\";\n      this.emitReserved(\"error\", err);\n\n      if (fn) {\n        fn(err);\n      } else {\n        // Only do this if there is no fn to handle the error\n        this.maybeReconnectOnOpen();\n      }\n    }; // emit `error`\n\n\n    const errorSub = on(socket, \"error\", onError);\n\n    if (false !== this._timeout) {\n      const timeout = this._timeout; // set timer\n\n      const timer = this.setTimeoutFn(() => {\n        openSubDestroy();\n        onError(new Error(\"timeout\"));\n        socket.close();\n      }, timeout);\n\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n\n      this.subs.push(() => {\n        this.clearTimeoutFn(timer);\n      });\n    }\n\n    this.subs.push(openSubDestroy);\n    this.subs.push(errorSub);\n    return this;\n  }\n  /**\n   * Alias for open()\n   *\n   * @return self\n   * @public\n   */\n\n\n  connect(fn) {\n    return this.open(fn);\n  }\n  /**\n   * Called upon transport open.\n   *\n   * @private\n   */\n\n\n  onopen() {\n    // clear old subs\n    this.cleanup(); // mark as open\n\n    this._readyState = \"open\";\n    this.emitReserved(\"open\"); // add new subs\n\n    const socket = this.engine;\n    this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n  }\n  /**\n   * Called upon a ping.\n   *\n   * @private\n   */\n\n\n  onping() {\n    this.emitReserved(\"ping\");\n  }\n  /**\n   * Called with data.\n   *\n   * @private\n   */\n\n\n  ondata(data) {\n    try {\n      this.decoder.add(data);\n    } catch (e) {\n      this.onclose(\"parse error\", e);\n    }\n  }\n  /**\n   * Called when parser fully decodes a packet.\n   *\n   * @private\n   */\n\n\n  ondecoded(packet) {\n    // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n    nextTick(() => {\n      this.emitReserved(\"packet\", packet);\n    }, this.setTimeoutFn);\n  }\n  /**\n   * Called upon socket error.\n   *\n   * @private\n   */\n\n\n  onerror(err) {\n    this.emitReserved(\"error\", err);\n  }\n  /**\n   * Creates a new socket for the given `nsp`.\n   *\n   * @return {Socket}\n   * @public\n   */\n\n\n  socket(nsp, opts) {\n    let socket = this.nsps[nsp];\n\n    if (!socket) {\n      socket = new Socket(this, nsp, opts);\n      this.nsps[nsp] = socket;\n    } else if (this._autoConnect && !socket.active) {\n      socket.connect();\n    }\n\n    return socket;\n  }\n  /**\n   * Called upon a socket close.\n   *\n   * @param socket\n   * @private\n   */\n\n\n  _destroy(socket) {\n    const nsps = Object.keys(this.nsps);\n\n    for (const nsp of nsps) {\n      const socket = this.nsps[nsp];\n\n      if (socket.active) {\n        return;\n      }\n    }\n\n    this._close();\n  }\n  /**\n   * Writes a packet.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  _packet(packet) {\n    const encodedPackets = this.encoder.encode(packet);\n\n    for (let i = 0; i < encodedPackets.length; i++) {\n      this.engine.write(encodedPackets[i], packet.options);\n    }\n  }\n  /**\n   * Clean up transport subscriptions and packet buffer.\n   *\n   * @private\n   */\n\n\n  cleanup() {\n    this.subs.forEach(subDestroy => subDestroy());\n    this.subs.length = 0;\n    this.decoder.destroy();\n  }\n  /**\n   * Close the current socket.\n   *\n   * @private\n   */\n\n\n  _close() {\n    this.skipReconnect = true;\n    this._reconnecting = false;\n    this.onclose(\"forced close\");\n    if (this.engine) this.engine.close();\n  }\n  /**\n   * Alias for close()\n   *\n   * @private\n   */\n\n\n  disconnect() {\n    return this._close();\n  }\n  /**\n   * Called upon engine close.\n   *\n   * @private\n   */\n\n\n  onclose(reason, description) {\n    this.cleanup();\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    this.emitReserved(\"close\", reason, description);\n\n    if (this._reconnection && !this.skipReconnect) {\n      this.reconnect();\n    }\n  }\n  /**\n   * Attempt a reconnection.\n   *\n   * @private\n   */\n\n\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect) return this;\n    const self = this;\n\n    if (this.backoff.attempts >= this._reconnectionAttempts) {\n      this.backoff.reset();\n      this.emitReserved(\"reconnect_failed\");\n      this._reconnecting = false;\n    } else {\n      const delay = this.backoff.duration();\n      this._reconnecting = true;\n      const timer = this.setTimeoutFn(() => {\n        if (self.skipReconnect) return;\n        this.emitReserved(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n        if (self.skipReconnect) return;\n        self.open(err => {\n          if (err) {\n            self._reconnecting = false;\n            self.reconnect();\n            this.emitReserved(\"reconnect_error\", err);\n          } else {\n            self.onreconnect();\n          }\n        });\n      }, delay);\n\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n\n      this.subs.push(() => {\n        this.clearTimeoutFn(timer);\n      });\n    }\n  }\n  /**\n   * Called upon successful reconnect.\n   *\n   * @private\n   */\n\n\n  onreconnect() {\n    const attempt = this.backoff.attempts;\n    this._reconnecting = false;\n    this.backoff.reset();\n    this.emitReserved(\"reconnect\", attempt);\n  }\n\n}","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/socket.io-client/build/esm/manager.js"],"names":["Socket","Engine","installTimerFunctions","nextTick","parser","on","Backoff","Emitter","Manager","constructor","uri","opts","_a","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSubDestroy","onopen","onError","err","cleanup","emitReserved","errorSub","timer","setTimeoutFn","Error","close","autoUnref","unref","push","clearTimeoutFn","connect","onping","bind","ondata","onerror","onclose","ondecoded","data","add","e","packet","nsp","active","_destroy","Object","keys","_close","_packet","encodedPackets","encode","i","write","options","forEach","subDestroy","destroy","disconnect","reason","description","reset","delay","duration","onreconnect","attempt"],"mappings":"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","sourcesContent":["import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}