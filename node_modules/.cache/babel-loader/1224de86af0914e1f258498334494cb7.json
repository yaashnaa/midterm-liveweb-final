{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebTransport = void 0;\n\nconst transport_1 = require(\"../transport\");\n\nconst debug_1 = require(\"debug\");\n\nconst engine_io_parser_1 = require(\"engine.io-parser\");\n\nconst debug = (0, debug_1.default)(\"engine:webtransport\");\n/**\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/WebTransport_API\n */\n\nclass WebTransport extends transport_1.Transport {\n  constructor(session, stream, reader) {\n    super({\n      _query: {\n        EIO: \"4\"\n      }\n    });\n    this.session = session;\n    const transformStream = (0, engine_io_parser_1.createPacketEncoderStream)();\n    transformStream.readable.pipeTo(stream.writable).catch(() => {\n      debug(\"the stream was closed\");\n    });\n    this.writer = transformStream.writable.getWriter();\n\n    (async () => {\n      try {\n        while (true) {\n          const {\n            value,\n            done\n          } = await reader.read();\n\n          if (done) {\n            debug(\"session is closed\");\n            break;\n          }\n\n          debug(\"received chunk: %o\", value);\n          this.onPacket(value);\n        }\n      } catch (e) {\n        debug(\"error while reading: %s\", e.message);\n      }\n    })();\n\n    session.closed.then(() => this.onClose());\n    this.writable = true;\n  }\n\n  get name() {\n    return \"webtransport\";\n  }\n\n  get supportsFraming() {\n    return true;\n  }\n\n  async send(packets) {\n    this.writable = false;\n\n    try {\n      for (let i = 0; i < packets.length; i++) {\n        const packet = packets[i];\n        await this.writer.write(packet);\n      }\n    } catch (e) {\n      debug(\"error while writing: %s\", e.message);\n    }\n\n    this.writable = true;\n    this.emit(\"drain\");\n  }\n\n  doClose(fn) {\n    debug(\"closing WebTransport session\");\n    this.session.close();\n    fn && fn();\n  }\n\n}\n\nexports.WebTransport = WebTransport;","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/engine.io/build/transports/webtransport.js"],"names":["Object","defineProperty","exports","value","WebTransport","transport_1","require","debug_1","engine_io_parser_1","debug","default","Transport","constructor","session","stream","reader","_query","EIO","transformStream","createPacketEncoderStream","readable","pipeTo","writable","catch","writer","getWriter","done","read","onPacket","e","message","closed","then","onClose","name","supportsFraming","send","packets","i","length","packet","write","emit","doClose","fn","close"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMG,KAAK,GAAG,CAAC,GAAGF,OAAO,CAACG,OAAZ,EAAqB,qBAArB,CAAd;AACA;;;;AAGA,MAAMN,YAAN,SAA2BC,WAAW,CAACM,SAAvC,CAAiD;AAC7CC,EAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AACjC,UAAM;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAE;AAAP;AAAV,KAAN;AACA,SAAKJ,OAAL,GAAeA,OAAf;AACA,UAAMK,eAAe,GAAG,CAAC,GAAGV,kBAAkB,CAACW,yBAAvB,GAAxB;AACAD,IAAAA,eAAe,CAACE,QAAhB,CAAyBC,MAAzB,CAAgCP,MAAM,CAACQ,QAAvC,EAAiDC,KAAjD,CAAuD,MAAM;AACzDd,MAAAA,KAAK,CAAC,uBAAD,CAAL;AACH,KAFD;AAGA,SAAKe,MAAL,GAAcN,eAAe,CAACI,QAAhB,CAAyBG,SAAzB,EAAd;;AACA,KAAC,YAAY;AACT,UAAI;AACA,eAAO,IAAP,EAAa;AACT,gBAAM;AAAEtB,YAAAA,KAAF;AAASuB,YAAAA;AAAT,cAAkB,MAAMX,MAAM,CAACY,IAAP,EAA9B;;AACA,cAAID,IAAJ,EAAU;AACNjB,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACA;AACH;;AACDA,UAAAA,KAAK,CAAC,oBAAD,EAAuBN,KAAvB,CAAL;AACA,eAAKyB,QAAL,CAAczB,KAAd;AACH;AACJ,OAVD,CAWA,OAAO0B,CAAP,EAAU;AACNpB,QAAAA,KAAK,CAAC,yBAAD,EAA4BoB,CAAC,CAACC,OAA9B,CAAL;AACH;AACJ,KAfD;;AAgBAjB,IAAAA,OAAO,CAACkB,MAAR,CAAeC,IAAf,CAAoB,MAAM,KAAKC,OAAL,EAA1B;AACA,SAAKX,QAAL,GAAgB,IAAhB;AACH;;AACD,MAAIY,IAAJ,GAAW;AACP,WAAO,cAAP;AACH;;AACD,MAAIC,eAAJ,GAAsB;AAClB,WAAO,IAAP;AACH;;AACD,QAAMC,IAAN,CAAWC,OAAX,EAAoB;AAChB,SAAKf,QAAL,GAAgB,KAAhB;;AACA,QAAI;AACA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,cAAME,MAAM,GAAGH,OAAO,CAACC,CAAD,CAAtB;AACA,cAAM,KAAKd,MAAL,CAAYiB,KAAZ,CAAkBD,MAAlB,CAAN;AACH;AACJ,KALD,CAMA,OAAOX,CAAP,EAAU;AACNpB,MAAAA,KAAK,CAAC,yBAAD,EAA4BoB,CAAC,CAACC,OAA9B,CAAL;AACH;;AACD,SAAKR,QAAL,GAAgB,IAAhB;AACA,SAAKoB,IAAL,CAAU,OAAV;AACH;;AACDC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACRnC,IAAAA,KAAK,CAAC,8BAAD,CAAL;AACA,SAAKI,OAAL,CAAagC,KAAb;AACAD,IAAAA,EAAE,IAAIA,EAAE,EAAR;AACH;;AApD4C;;AAsDjD1C,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebTransport = void 0;\nconst transport_1 = require(\"../transport\");\nconst debug_1 = require(\"debug\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst debug = (0, debug_1.default)(\"engine:webtransport\");\n/**\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/WebTransport_API\n */\nclass WebTransport extends transport_1.Transport {\n    constructor(session, stream, reader) {\n        super({ _query: { EIO: \"4\" } });\n        this.session = session;\n        const transformStream = (0, engine_io_parser_1.createPacketEncoderStream)();\n        transformStream.readable.pipeTo(stream.writable).catch(() => {\n            debug(\"the stream was closed\");\n        });\n        this.writer = transformStream.writable.getWriter();\n        (async () => {\n            try {\n                while (true) {\n                    const { value, done } = await reader.read();\n                    if (done) {\n                        debug(\"session is closed\");\n                        break;\n                    }\n                    debug(\"received chunk: %o\", value);\n                    this.onPacket(value);\n                }\n            }\n            catch (e) {\n                debug(\"error while reading: %s\", e.message);\n            }\n        })();\n        session.closed.then(() => this.onClose());\n        this.writable = true;\n    }\n    get name() {\n        return \"webtransport\";\n    }\n    get supportsFraming() {\n        return true;\n    }\n    async send(packets) {\n        this.writable = false;\n        try {\n            for (let i = 0; i < packets.length; i++) {\n                const packet = packets[i];\n                await this.writer.write(packet);\n            }\n        }\n        catch (e) {\n            debug(\"error while writing: %s\", e.message);\n        }\n        this.writable = true;\n        this.emit(\"drain\");\n    }\n    doClose(fn) {\n        debug(\"closing WebTransport session\");\n        this.session.close();\n        fn && fn();\n    }\n}\nexports.WebTransport = WebTransport;\n"]},"metadata":{},"sourceType":"script"}