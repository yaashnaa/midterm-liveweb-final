{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteSocket = exports.BroadcastOperator = void 0;\n\nconst socket_1 = require(\"./socket\");\n\nconst socket_io_parser_1 = require(\"socket.io-parser\");\n\nclass BroadcastOperator {\n  constructor(adapter, rooms = new Set(), exceptRooms = new Set(), flags = {}) {\n    this.adapter = adapter;\n    this.rooms = rooms;\n    this.exceptRooms = exceptRooms;\n    this.flags = flags;\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * io.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms (a client will be notified at most once)\n   * io.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * io.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  to(room) {\n    const rooms = new Set(this.rooms);\n\n    if (Array.isArray(room)) {\n      room.forEach(r => rooms.add(r));\n    } else {\n      rooms.add(room);\n    }\n\n    return new BroadcastOperator(this.adapter, rooms, this.exceptRooms, this.flags);\n  }\n  /**\n   * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n   *\n   * @example\n   * // disconnect all clients in the \"room-101\" room\n   * io.in(\"room-101\").disconnectSockets();\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  in(room) {\n    return this.to(room);\n  }\n  /**\n   * Excludes a room when emitting.\n   *\n   * @example\n   * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n   * io.except(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms\n   * io.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * io.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  except(room) {\n    const exceptRooms = new Set(this.exceptRooms);\n\n    if (Array.isArray(room)) {\n      room.forEach(r => exceptRooms.add(r));\n    } else {\n      exceptRooms.add(room);\n    }\n\n    return new BroadcastOperator(this.adapter, this.rooms, exceptRooms, this.flags);\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * io.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return a new BroadcastOperator instance\n   */\n\n\n  compress(compress) {\n    const flags = Object.assign({}, this.flags, {\n      compress\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @example\n   * io.volatile.emit(\"hello\"); // the clients may or may not receive it\n   *\n   * @return a new BroadcastOperator instance\n   */\n\n\n  get volatile() {\n    const flags = Object.assign({}, this.flags, {\n      volatile: true\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients on this node\n   * io.local.emit(\"foo\", \"bar\");\n   *\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  get local() {\n    const flags = Object.assign({}, this.flags, {\n      local: true\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation\n   *\n   * @example\n   * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @param timeout\n   */\n\n\n  timeout(timeout) {\n    const flags = Object.assign({}, this.flags, {\n      timeout\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Emits to all clients.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients\n   * io.emit(\"foo\", \"bar\");\n   *\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * io.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an acknowledgement expected from all connected clients\n   * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @return Always true\n   */\n\n\n  emit(ev, ...args) {\n    if (socket_1.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${String(ev)}\" is a reserved event name`);\n    } // set up packet object\n\n\n    const data = [ev, ...args];\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: data\n    };\n    const withAck = typeof data[data.length - 1] === \"function\";\n\n    if (!withAck) {\n      this.adapter.broadcast(packet, {\n        rooms: this.rooms,\n        except: this.exceptRooms,\n        flags: this.flags\n      });\n      return true;\n    }\n\n    const ack = data.pop();\n    let timedOut = false;\n    let responses = [];\n    const timer = setTimeout(() => {\n      timedOut = true;\n      ack.apply(this, [new Error(\"operation has timed out\"), this.flags.expectSingleResponse ? null : responses]);\n    }, this.flags.timeout);\n    let expectedServerCount = -1;\n    let actualServerCount = 0;\n    let expectedClientCount = 0;\n\n    const checkCompleteness = () => {\n      if (!timedOut && expectedServerCount === actualServerCount && responses.length === expectedClientCount) {\n        clearTimeout(timer);\n        ack.apply(this, [null, this.flags.expectSingleResponse ? null : responses]);\n      }\n    };\n\n    this.adapter.broadcastWithAck(packet, {\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, clientCount => {\n      // each Socket.IO server in the cluster sends the number of clients that were notified\n      expectedClientCount += clientCount;\n      actualServerCount++;\n      checkCompleteness();\n    }, clientResponse => {\n      // each client sends an acknowledgement\n      responses.push(clientResponse);\n      checkCompleteness();\n    });\n    this.adapter.serverCount().then(serverCount => {\n      expectedServerCount = serverCount;\n      checkCompleteness();\n    });\n    return true;\n  }\n  /**\n   * Emits an event and waits for an acknowledgement from all clients.\n   *\n   * @example\n   * try {\n   *   const responses = await io.timeout(1000).emitWithAck(\"some-event\");\n   *   console.log(responses); // one response per client\n   * } catch (e) {\n   *   // some clients did not acknowledge the event in the given delay\n   * }\n   *\n   * @return a Promise that will be fulfilled when all clients have acknowledged the event\n   */\n\n\n  emitWithAck(ev, ...args) {\n    return new Promise((resolve, reject) => {\n      args.push((err, responses) => {\n        if (err) {\n          err.responses = responses;\n          return reject(err);\n        } else {\n          return resolve(responses);\n        }\n      });\n      this.emit(ev, ...args);\n    });\n  }\n  /**\n   * Gets a list of clients.\n   *\n   * @deprecated this method will be removed in the next major release, please use {@link Server#serverSideEmit} or\n   * {@link fetchSockets} instead.\n   */\n\n\n  allSockets() {\n    if (!this.adapter) {\n      throw new Error(\"No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?\");\n    }\n\n    return this.adapter.sockets(this.rooms);\n  }\n  /**\n   * Returns the matching socket instances. This method works across a cluster of several Socket.IO servers.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // return all Socket instances\n   * const sockets = await io.fetchSockets();\n   *\n   * // return all Socket instances in the \"room1\" room\n   * const sockets = await io.in(\"room1\").fetchSockets();\n   *\n   * for (const socket of sockets) {\n   *   console.log(socket.id);\n   *   console.log(socket.handshake);\n   *   console.log(socket.rooms);\n   *   console.log(socket.data);\n   *\n   *   socket.emit(\"hello\");\n   *   socket.join(\"room1\");\n   *   socket.leave(\"room2\");\n   *   socket.disconnect();\n   * }\n   */\n\n\n  fetchSockets() {\n    return this.adapter.fetchSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }).then(sockets => {\n      return sockets.map(socket => {\n        if (socket instanceof socket_1.Socket) {\n          // FIXME the TypeScript compiler complains about missing private properties\n          return socket;\n        } else {\n          return new RemoteSocket(this.adapter, socket);\n        }\n      });\n    });\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   *\n   * // make all socket instances join the \"room1\" room\n   * io.socketsJoin(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n   * io.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n\n\n  socketsJoin(room) {\n    this.adapter.addSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, Array.isArray(room) ? room : [room]);\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // make all socket instances leave the \"room1\" room\n   * io.socketsLeave(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n   * io.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n\n\n  socketsLeave(room) {\n    this.adapter.delSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, Array.isArray(room) ? room : [room]);\n  }\n  /**\n   * Makes the matching socket instances disconnect.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n   * io.disconnectSockets();\n   *\n   * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n   * io.in(\"room1\").disconnectSockets(true);\n   *\n   * @param close - whether to close the underlying connection\n   */\n\n\n  disconnectSockets(close = false) {\n    this.adapter.disconnectSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, close);\n  }\n\n}\n\nexports.BroadcastOperator = BroadcastOperator;\n/**\n * Expose of subset of the attributes and methods of the Socket class\n */\n\nclass RemoteSocket {\n  constructor(adapter, details) {\n    this.id = details.id;\n    this.handshake = details.handshake;\n    this.rooms = new Set(details.rooms);\n    this.data = details.data;\n    this.operator = new BroadcastOperator(adapter, new Set([this.id]), new Set(), {\n      expectSingleResponse: true // so that remoteSocket.emit() with acknowledgement behaves like socket.emit()\n\n    });\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation.\n   *\n   * @example\n   * const sockets = await io.fetchSockets();\n   *\n   * for (const socket of sockets) {\n   *   if (someCondition) {\n   *     socket.timeout(1000).emit(\"some-event\", (err) => {\n   *       if (err) {\n   *         // the client did not acknowledge the event in the given delay\n   *       }\n   *     });\n   *   }\n   * }\n   *\n   * // note: if possible, using a room instead of looping over all sockets is preferable\n   * io.timeout(1000).to(someConditionRoom).emit(\"some-event\", (err, responses) => {\n   *   // ...\n   * });\n   *\n   * @param timeout\n   */\n\n\n  timeout(timeout) {\n    return this.operator.timeout(timeout);\n  }\n\n  emit(ev, ...args) {\n    return this.operator.emit(ev, ...args);\n  }\n  /**\n   * Joins a room.\n   *\n   * @param {String|Array} room - room or array of rooms\n   */\n\n\n  join(room) {\n    return this.operator.socketsJoin(room);\n  }\n  /**\n   * Leaves a room.\n   *\n   * @param {String} room\n   */\n\n\n  leave(room) {\n    return this.operator.socketsLeave(room);\n  }\n  /**\n   * Disconnects this client.\n   *\n   * @param {Boolean} close - if `true`, closes the underlying connection\n   * @return {Socket} self\n   */\n\n\n  disconnect(close = false) {\n    this.operator.disconnectSockets(close);\n    return this;\n  }\n\n}\n\nexports.RemoteSocket = RemoteSocket;","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/socket.io/dist/broadcast-operator.js"],"names":["Object","defineProperty","exports","value","RemoteSocket","BroadcastOperator","socket_1","require","socket_io_parser_1","constructor","adapter","rooms","Set","exceptRooms","flags","to","room","Array","isArray","forEach","r","add","in","except","compress","assign","volatile","local","timeout","emit","ev","args","RESERVED_EVENTS","has","Error","String","data","packet","type","PacketType","EVENT","withAck","length","broadcast","ack","pop","timedOut","responses","timer","setTimeout","apply","expectSingleResponse","expectedServerCount","actualServerCount","expectedClientCount","checkCompleteness","clearTimeout","broadcastWithAck","clientCount","clientResponse","push","serverCount","then","emitWithAck","Promise","resolve","reject","err","allSockets","sockets","fetchSockets","map","socket","Socket","socketsJoin","addSockets","socketsLeave","delSockets","disconnectSockets","close","details","id","handshake","operator","join","leave","disconnect"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteSocket = exports.BroadcastOperator = void 0;\nconst socket_1 = require(\"./socket\");\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nclass BroadcastOperator {\n    constructor(adapter, rooms = new Set(), exceptRooms = new Set(), flags = {}) {\n        this.adapter = adapter;\n        this.rooms = rooms;\n        this.exceptRooms = exceptRooms;\n        this.flags = flags;\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * io.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms (a client will be notified at most once)\n     * io.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * io.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    to(room) {\n        const rooms = new Set(this.rooms);\n        if (Array.isArray(room)) {\n            room.forEach((r) => rooms.add(r));\n        }\n        else {\n            rooms.add(room);\n        }\n        return new BroadcastOperator(this.adapter, rooms, this.exceptRooms, this.flags);\n    }\n    /**\n     * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * // disconnect all clients in the \"room-101\" room\n     * io.in(\"room-101\").disconnectSockets();\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    in(room) {\n        return this.to(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @example\n     * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     * io.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms\n     * io.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * io.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    except(room) {\n        const exceptRooms = new Set(this.exceptRooms);\n        if (Array.isArray(room)) {\n            room.forEach((r) => exceptRooms.add(r));\n        }\n        else {\n            exceptRooms.add(room);\n        }\n        return new BroadcastOperator(this.adapter, this.rooms, exceptRooms, this.flags);\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * io.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return a new BroadcastOperator instance\n     */\n    compress(compress) {\n        const flags = Object.assign({}, this.flags, { compress });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * io.volatile.emit(\"hello\"); // the clients may or may not receive it\n     *\n     * @return a new BroadcastOperator instance\n     */\n    get volatile() {\n        const flags = Object.assign({}, this.flags, { volatile: true });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients on this node\n     * io.local.emit(\"foo\", \"bar\");\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get local() {\n        const flags = Object.assign({}, this.flags, { local: true });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation\n     *\n     * @example\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        const flags = Object.assign({}, this.flags, { timeout });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Emits to all clients.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients\n     * io.emit(\"foo\", \"bar\");\n     *\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * io.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an acknowledgement expected from all connected clients\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @return Always true\n     */\n    emit(ev, ...args) {\n        if (socket_1.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${String(ev)}\" is a reserved event name`);\n        }\n        // set up packet object\n        const data = [ev, ...args];\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: data,\n        };\n        const withAck = typeof data[data.length - 1] === \"function\";\n        if (!withAck) {\n            this.adapter.broadcast(packet, {\n                rooms: this.rooms,\n                except: this.exceptRooms,\n                flags: this.flags,\n            });\n            return true;\n        }\n        const ack = data.pop();\n        let timedOut = false;\n        let responses = [];\n        const timer = setTimeout(() => {\n            timedOut = true;\n            ack.apply(this, [\n                new Error(\"operation has timed out\"),\n                this.flags.expectSingleResponse ? null : responses,\n            ]);\n        }, this.flags.timeout);\n        let expectedServerCount = -1;\n        let actualServerCount = 0;\n        let expectedClientCount = 0;\n        const checkCompleteness = () => {\n            if (!timedOut &&\n                expectedServerCount === actualServerCount &&\n                responses.length === expectedClientCount) {\n                clearTimeout(timer);\n                ack.apply(this, [\n                    null,\n                    this.flags.expectSingleResponse ? null : responses,\n                ]);\n            }\n        };\n        this.adapter.broadcastWithAck(packet, {\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, (clientCount) => {\n            // each Socket.IO server in the cluster sends the number of clients that were notified\n            expectedClientCount += clientCount;\n            actualServerCount++;\n            checkCompleteness();\n        }, (clientResponse) => {\n            // each client sends an acknowledgement\n            responses.push(clientResponse);\n            checkCompleteness();\n        });\n        this.adapter.serverCount().then((serverCount) => {\n            expectedServerCount = serverCount;\n            checkCompleteness();\n        });\n        return true;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement from all clients.\n     *\n     * @example\n     * try {\n     *   const responses = await io.timeout(1000).emitWithAck(\"some-event\");\n     *   console.log(responses); // one response per client\n     * } catch (e) {\n     *   // some clients did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when all clients have acknowledged the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            args.push((err, responses) => {\n                if (err) {\n                    err.responses = responses;\n                    return reject(err);\n                }\n                else {\n                    return resolve(responses);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @deprecated this method will be removed in the next major release, please use {@link Server#serverSideEmit} or\n     * {@link fetchSockets} instead.\n     */\n    allSockets() {\n        if (!this.adapter) {\n            throw new Error(\"No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?\");\n        }\n        return this.adapter.sockets(this.rooms);\n    }\n    /**\n     * Returns the matching socket instances. This method works across a cluster of several Socket.IO servers.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // return all Socket instances\n     * const sockets = await io.fetchSockets();\n     *\n     * // return all Socket instances in the \"room1\" room\n     * const sockets = await io.in(\"room1\").fetchSockets();\n     *\n     * for (const socket of sockets) {\n     *   console.log(socket.id);\n     *   console.log(socket.handshake);\n     *   console.log(socket.rooms);\n     *   console.log(socket.data);\n     *\n     *   socket.emit(\"hello\");\n     *   socket.join(\"room1\");\n     *   socket.leave(\"room2\");\n     *   socket.disconnect();\n     * }\n     */\n    fetchSockets() {\n        return this.adapter\n            .fetchSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        })\n            .then((sockets) => {\n            return sockets.map((socket) => {\n                if (socket instanceof socket_1.Socket) {\n                    // FIXME the TypeScript compiler complains about missing private properties\n                    return socket;\n                }\n                else {\n                    return new RemoteSocket(this.adapter, socket);\n                }\n            });\n        });\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     *\n     * // make all socket instances join the \"room1\" room\n     * io.socketsJoin(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n     * io.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsJoin(room) {\n        this.adapter.addSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, Array.isArray(room) ? room : [room]);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // make all socket instances leave the \"room1\" room\n     * io.socketsLeave(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n     * io.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsLeave(room) {\n        this.adapter.delSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, Array.isArray(room) ? room : [room]);\n    }\n    /**\n     * Makes the matching socket instances disconnect.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n     * io.disconnectSockets();\n     *\n     * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n     * io.in(\"room1\").disconnectSockets(true);\n     *\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(close = false) {\n        this.adapter.disconnectSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, close);\n    }\n}\nexports.BroadcastOperator = BroadcastOperator;\n/**\n * Expose of subset of the attributes and methods of the Socket class\n */\nclass RemoteSocket {\n    constructor(adapter, details) {\n        this.id = details.id;\n        this.handshake = details.handshake;\n        this.rooms = new Set(details.rooms);\n        this.data = details.data;\n        this.operator = new BroadcastOperator(adapter, new Set([this.id]), new Set(), {\n            expectSingleResponse: true, // so that remoteSocket.emit() with acknowledgement behaves like socket.emit()\n        });\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation.\n     *\n     * @example\n     * const sockets = await io.fetchSockets();\n     *\n     * for (const socket of sockets) {\n     *   if (someCondition) {\n     *     socket.timeout(1000).emit(\"some-event\", (err) => {\n     *       if (err) {\n     *         // the client did not acknowledge the event in the given delay\n     *       }\n     *     });\n     *   }\n     * }\n     *\n     * // note: if possible, using a room instead of looping over all sockets is preferable\n     * io.timeout(1000).to(someConditionRoom).emit(\"some-event\", (err, responses) => {\n     *   // ...\n     * });\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        return this.operator.timeout(timeout);\n    }\n    emit(ev, ...args) {\n        return this.operator.emit(ev, ...args);\n    }\n    /**\n     * Joins a room.\n     *\n     * @param {String|Array} room - room or array of rooms\n     */\n    join(room) {\n        return this.operator.socketsJoin(room);\n    }\n    /**\n     * Leaves a room.\n     *\n     * @param {String} room\n     */\n    leave(room) {\n        return this.operator.socketsLeave(room);\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return {Socket} self\n     */\n    disconnect(close = false) {\n        this.operator.disconnectSockets(close);\n        return this;\n    }\n}\nexports.RemoteSocket = RemoteSocket;\n"]},"metadata":{},"sourceType":"script"}