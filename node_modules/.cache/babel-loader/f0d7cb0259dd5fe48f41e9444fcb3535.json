{"ast":null,"code":"import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nimport { encode } from \"./contrib/parseqs.js\";\n\nclass TransportError extends Error {\n  constructor(reason, description, context) {\n    super(reason);\n    this.description = description;\n    this.context = context;\n    this.type = \"TransportError\";\n  }\n\n}\n\nexport class Transport extends Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} opts - options\n   * @protected\n   */\n  constructor(opts) {\n    super();\n    this.writable = false;\n    installTimerFunctions(this, opts);\n    this.opts = opts;\n    this.query = opts.query;\n    this.socket = opts.socket;\n  }\n  /**\n   * Emits an error.\n   *\n   * @param {String} reason\n   * @param description\n   * @param context - the error context\n   * @return {Transport} for chaining\n   * @protected\n   */\n\n\n  onError(reason, description, context) {\n    super.emitReserved(\"error\", new TransportError(reason, description, context));\n    return this;\n  }\n  /**\n   * Opens the transport.\n   */\n\n\n  open() {\n    this.readyState = \"opening\";\n    this.doOpen();\n    return this;\n  }\n  /**\n   * Closes the transport.\n   */\n\n\n  close() {\n    if (this.readyState === \"opening\" || this.readyState === \"open\") {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   */\n\n\n  send(packets) {\n    if (this.readyState === \"open\") {\n      this.write(packets);\n    } else {// this might happen if the transport was silently closed in the beforeunload event handler\n    }\n  }\n  /**\n   * Called upon open\n   *\n   * @protected\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    super.emitReserved(\"open\");\n  }\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @protected\n   */\n\n\n  onData(data) {\n    const packet = decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  /**\n   * Called with a decoded packet.\n   *\n   * @protected\n   */\n\n\n  onPacket(packet) {\n    super.emitReserved(\"packet\", packet);\n  }\n  /**\n   * Called upon close.\n   *\n   * @protected\n   */\n\n\n  onClose(details) {\n    this.readyState = \"closed\";\n    super.emitReserved(\"close\", details);\n  }\n  /**\n   * Pauses the transport, in order not to lose packets during an upgrade.\n   *\n   * @param onPause\n   */\n\n\n  pause(onPause) {}\n\n  createUri(schema, query = {}) {\n    return schema + \"://\" + this._hostname() + this._port() + this.opts.path + this._query(query);\n  }\n\n  _hostname() {\n    const hostname = this.opts.hostname;\n    return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n  }\n\n  _port() {\n    if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {\n      return \":\" + this.opts.port;\n    } else {\n      return \"\";\n    }\n  }\n\n  _query(query) {\n    const encodedQuery = encode(query);\n    return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n  }\n\n}","map":{"version":3,"sources":["/Users/yashna/Desktop/midterm-liveweb/node_modules/engine.io-client/build/esm/transport.js"],"names":["decodePacket","Emitter","installTimerFunctions","encode","TransportError","Error","constructor","reason","description","context","type","Transport","opts","writable","query","socket","onError","emitReserved","open","readyState","doOpen","close","doClose","onClose","send","packets","write","onOpen","onData","data","packet","binaryType","onPacket","details","pause","onPause","createUri","schema","_hostname","_port","path","_query","hostname","indexOf","port","secure","Number","encodedQuery","length"],"mappings":"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","sourcesContent":["import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nimport { encode } from \"./contrib/parseqs.js\";\nclass TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     */\n    open() {\n        this.readyState = \"opening\";\n        this.doOpen();\n        return this;\n    }\n    /**\n     * Closes the transport.\n     */\n    close() {\n        if (this.readyState === \"opening\" || this.readyState === \"open\") {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */\n    send(packets) {\n        if (this.readyState === \"open\") {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */\n    pause(onPause) { }\n    createUri(schema, query = {}) {\n        return (schema +\n            \"://\" +\n            this._hostname() +\n            this._port() +\n            this.opts.path +\n            this._query(query));\n    }\n    _hostname() {\n        const hostname = this.opts.hostname;\n        return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    }\n    _port() {\n        if (this.opts.port &&\n            ((this.opts.secure && Number(this.opts.port !== 443)) ||\n                (!this.opts.secure && Number(this.opts.port) !== 80))) {\n            return \":\" + this.opts.port;\n        }\n        else {\n            return \"\";\n        }\n    }\n    _query(query) {\n        const encodedQuery = encode(query);\n        return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    }\n}\n"]},"metadata":{},"sourceType":"module"}