{"ast":null,"code":"import _get from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\n\nvar RESERVED_EVENTS = [\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\" // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\n\nexport var protocol = 5;\nexport var PacketType;\n\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\n\n\nexport var Encoder = /*#__PURE__*/function () {\n  /**\n   * Encoder constructor\n   *\n   * @param {function} replacer - custom replacer to pass down to JSON.parse\n   */\n  function Encoder(replacer) {\n    _classCallCheck(this, Encoder);\n\n    this.replacer = replacer;\n  }\n  /**\n   * Encode a packet as a single string if non-binary, or as a\n   * buffer sequence, depending on packet type.\n   *\n   * @param {Object} obj - packet object\n   */\n\n\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value: function encode(obj) {\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if (hasBinary(obj)) {\n          return this.encodeAsBinary({\n            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n            nsp: obj.nsp,\n            data: obj.data,\n            id: obj.id\n          });\n        }\n      }\n\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n\n  }, {\n    key: \"encodeAsString\",\n    value: function encodeAsString(obj) {\n      // first is type\n      var str = \"\" + obj.type; // attachments if we have them\n\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      } // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n\n\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      } // immediately followed by the id\n\n\n      if (null != obj.id) {\n        str += obj.id;\n      } // json data\n\n\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data, this.replacer);\n      }\n\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n\n  }, {\n    key: \"encodeAsBinary\",\n    value: function encodeAsBinary(obj) {\n      var deconstruction = deconstructPacket(obj);\n      var pack = this.encodeAsString(deconstruction.packet);\n      var buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n\n      return buffers; // write all the buffers\n    }\n  }]);\n\n  return Encoder;\n}(); // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\n\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\n\n\nexport var Decoder = /*#__PURE__*/function (_Emitter) {\n  _inherits(Decoder, _Emitter);\n\n  var _super = _createSuper(Decoder);\n\n  /**\n   * Decoder constructor\n   *\n   * @param {function} reviver - custom reviver to pass down to JSON.stringify\n   */\n  function Decoder(reviver) {\n    var _this;\n\n    _classCallCheck(this, Decoder);\n\n    _this = _super.call(this);\n    _this.reviver = reviver;\n    return _this;\n  }\n  /**\n   * Decodes an encoded packet string into packet JSON.\n   *\n   * @param {String} obj - encoded packet\n   */\n\n\n  _createClass(Decoder, [{\n    key: \"add\",\n    value: function add(obj) {\n      var packet;\n\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n\n        packet = this.decodeString(obj);\n        var isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n\n        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK; // binary packet's json\n\n          this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow\n\n          if (packet.attachments === 0) {\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n        }\n      } else if (isBinary(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n\n  }, {\n    key: \"decodeString\",\n    value: function decodeString(str) {\n      var i = 0; // look up type\n\n      var p = {\n        type: Number(str.charAt(0))\n      };\n\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      } // look up attachments if type binary\n\n\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        var start = i + 1;\n\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n\n        var buf = str.substring(start, i);\n\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n\n        p.attachments = Number(buf);\n      } // look up namespace (if any)\n\n\n      if (\"/\" === str.charAt(i + 1)) {\n        var _start = i + 1;\n\n        while (++i) {\n          var c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n\n        p.nsp = str.substring(_start, i);\n      } else {\n        p.nsp = \"/\";\n      } // look up id\n\n\n      var next = str.charAt(i + 1);\n\n      if (\"\" !== next && Number(next) == next) {\n        var _start2 = i + 1;\n\n        while (++i) {\n          var _c = str.charAt(i);\n\n          if (null == _c || Number(_c) != _c) {\n            --i;\n            break;\n          }\n\n          if (i === str.length) break;\n        }\n\n        p.id = Number(str.substring(_start2, i + 1));\n      } // look up json data\n\n\n      if (str.charAt(++i)) {\n        var payload = this.tryParse(str.substr(i));\n\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n\n      return p;\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(str) {\n      try {\n        return JSON.parse(str, this.reviver);\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"destroy\",\n\n    /**\n     * Deallocates a parser's resources\n     */\n    value: function destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n        this.reconstructor = null;\n      }\n    }\n  }], [{\n    key: \"isPayloadValid\",\n    value: function isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return isObject(payload);\n\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || isObject(payload);\n\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS.indexOf(payload[0]) === -1);\n\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n  }]);\n\n  return Decoder;\n}(Emitter);\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\n\nvar BinaryReconstructor = /*#__PURE__*/function () {\n  function BinaryReconstructor(packet) {\n    _classCallCheck(this, BinaryReconstructor);\n\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\n   * Method to be called when binary data received from connection\n   * after a BINARY_EVENT packet.\n   *\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n   * @return {null | Object} returns null if more binary data is expected or\n   *   a reconstructed packet object if all buffers have been received.\n   */\n\n\n  _createClass(BinaryReconstructor, [{\n    key: \"takeBinaryData\",\n    value: function takeBinaryData(binData) {\n      this.buffers.push(binData);\n\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        var packet = reconstructPacket(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n\n  }, {\n    key: \"finishedReconstruction\",\n    value: function finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }]);\n\n  return BinaryReconstructor;\n}();","map":{"version":3,"sources":["/Users/yashna/Desktop/midterm-liveweb/node_modules/socket.io-parser/build/esm/index.js"],"names":["Emitter","deconstructPacket","reconstructPacket","isBinary","hasBinary","RESERVED_EVENTS","protocol","PacketType","Encoder","replacer","obj","type","EVENT","ACK","encodeAsBinary","BINARY_EVENT","BINARY_ACK","nsp","data","id","encodeAsString","str","attachments","JSON","stringify","deconstruction","pack","packet","buffers","unshift","isObject","value","Object","prototype","toString","call","Decoder","reviver","reconstructor","Error","decodeString","isBinaryEvent","BinaryReconstructor","base64","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","parse","e","finishedReconstruction","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","indexOf","reconPack","binData","push"],"mappings":"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","sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}