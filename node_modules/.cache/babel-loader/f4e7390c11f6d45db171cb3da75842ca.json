{"ast":null,"code":"import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\"; // detect ReactNative environment\n\nconst isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @param {Object} opts - connection options\n   * @protected\n   */\n  constructor(opts) {\n    super(opts);\n    this.supportsBinary = !opts.forceBase64;\n  }\n\n  get name() {\n    return \"websocket\";\n  }\n\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n    const opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emitReserved(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType;\n    this.addEventListeners();\n  }\n  /**\n   * Adds event listeners to the socket\n   *\n   * @private\n   */\n\n\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n\n      this.onOpen();\n    };\n\n    this.ws.onclose = closeEvent => this.onClose({\n      description: \"websocket connection closed\",\n      context: closeEvent\n    });\n\n    this.ws.onmessage = ev => this.onData(ev.data);\n\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n\n  write(packets) {\n    this.writable = false; // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      encodePacket(packet, this.supportsBinary, data => {\n        // always create a new object (GH-437)\n        const opts = {};\n\n        if (!usingBrowserWebSocket) {\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (this.opts.perMessageDeflate) {\n            const len = // @ts-ignore\n            \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n            if (len < this.opts.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        } // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n\n\n        try {\n          if (usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            this.ws.send(data);\n          } else {\n            this.ws.send(data, opts);\n          }\n        } catch (e) {}\n\n        if (lastPacket) {\n          // fake drain\n          // defer to next tick to allow Socket to clear writeBuffer\n          nextTick(() => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @private\n   */\n\n\n  uri() {\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    const query = this.query || {}; // append timestamp to URI\n\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    } // communicate binary support capabilities\n\n\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    return this.createUri(schema, query);\n  }\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @private\n   */\n\n\n  check() {\n    return !!WebSocket;\n  }\n\n}","map":{"version":3,"sources":["/Users/yashna/Desktop/midterm-liveweb/node_modules/engine.io-client/build/esm/transports/websocket.js"],"names":["Transport","yeast","pick","nextTick","usingBrowserWebSocket","WebSocket","encodePacket","isReactNative","navigator","product","toLowerCase","WS","constructor","opts","supportsBinary","forceBase64","name","doOpen","check","uri","protocols","extraHeaders","headers","ws","err","emitReserved","binaryType","socket","addEventListeners","onopen","autoUnref","_socket","unref","onOpen","onclose","closeEvent","onClose","description","context","onmessage","ev","onData","data","onerror","e","onError","write","packets","writable","i","length","packet","lastPacket","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","setTimeoutFn","doClose","close","schema","secure","query","timestampRequests","timestampParam","b64","createUri"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { nextTick, usingBrowserWebSocket, WebSocket, } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @param {Object} opts - connection options\n     * @protected\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @private\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}