{"ast":null,"code":"import _slicedToArray from\"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import'codemirror/lib/codemirror.css';import'codemirror/theme/material.css';import'codemirror/mode/xml/xml';import'codemirror/mode/javascript/javascript';import'codemirror/mode/css/css';import{Controlled as ControlledEditor}from'react-codemirror2';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faCompressAlt,faExpandAlt}from'@fortawesome/free-solid-svg-icons';export default function Editor(props){var language=props.language,displayName=props.displayName,value=props.value,onChange=props.onChange,socket=props.socket,setHtml=props.setHtml,setCss=props.setCss,setJs=props.setJs;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];useEffect(function(){socket.on('code-update',function(data){setHtml(data.html);setCss(data.css);setJs(data.js);socket.emit('code-update',{data:data});});// const { html, css, js } = props; \n},[]);// Handle code changes when a user interacts with the editor\nfunction handleChange(editor,data,value){onChange(value);var html=props.html,css=props.css,js=props.js;// Emit code changes to be shared with other connected clients\nsocket.emit('code-update',{html:html,css:css,js:js});}return/*#__PURE__*/React.createElement(\"div\",{className:\"editor-container \".concat(open?'':'collapsed')},/*#__PURE__*/React.createElement(\"div\",{className:\"editor-title\"},displayName,/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"expand-collapse-btn\",onClick:function onClick(){return setOpen(function(prevOpen){return!prevOpen;});}},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:open?faCompressAlt:faExpandAlt}))),/*#__PURE__*/React.createElement(ControlledEditor,{onBeforeChange:handleChange,value:value,className:\"code-mirror-wrapper\",socket:socket,options:{lineWrapping:true,lint:true,mode:language,theme:'material',lineNumbers:true}}));}","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/src/components/Editor.js"],"names":["React","useState","useEffect","Controlled","ControlledEditor","FontAwesomeIcon","faCompressAlt","faExpandAlt","Editor","props","language","displayName","value","onChange","socket","setHtml","setCss","setJs","open","setOpen","on","data","html","css","js","emit","handleChange","editor","prevOpen","lineWrapping","lint","mode","theme","lineNumbers"],"mappings":"uLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA0C,OAA1C,CACA,MAAO,+BAAP,CACA,MAAO,+BAAP,CACA,MAAO,yBAAP,CACA,MAAO,uCAAP,CACA,MAAO,yBAAP,CACA,OAASC,UAAU,GAAIC,CAAAA,gBAAvB,KAA+C,mBAA/C,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,OAASC,aAAT,CAAwBC,WAAxB,KAA2C,mCAA3C,CAEA,cAAe,SAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAuB,IAElCC,CAAAA,QAFkC,CAUhCD,KAVgC,CAElCC,QAFkC,CAGlCC,WAHkC,CAUhCF,KAVgC,CAGlCE,WAHkC,CAIlCC,KAJkC,CAUhCH,KAVgC,CAIlCG,KAJkC,CAKlCC,QALkC,CAUhCJ,KAVgC,CAKlCI,QALkC,CAMlCC,MANkC,CAUhCL,KAVgC,CAMlCK,MANkC,CAOlCC,OAPkC,CAUhCN,KAVgC,CAOlCM,OAPkC,CAQlCC,MARkC,CAUhCP,KAVgC,CAQlCO,MARkC,CASlCC,KATkC,CAUhCR,KAVgC,CASlCQ,KATkC,eAYZhB,QAAQ,CAAC,IAAD,CAZI,wCAY7BiB,IAZ6B,eAYvBC,OAZuB,eAapCjB,SAAS,CAAC,UAAM,CACdY,MAAM,CAACM,EAAP,CAAU,aAAV,CAAyB,SAACC,IAAD,CAAU,CACjCN,OAAO,CAACM,IAAI,CAACC,IAAN,CAAP,CACAN,MAAM,CAACK,IAAI,CAACE,GAAN,CAAN,CACAN,KAAK,CAACI,IAAI,CAACG,EAAN,CAAL,CACAV,MAAM,CAACW,IAAP,CAAY,aAAZ,CAA2B,CAAEJ,IAAI,CAAJA,IAAF,CAA3B,EACD,CALD,EAMA;AAED,CATQ,CASN,EATM,CAAT,CAWA;AACA,QAASK,CAAAA,YAAT,CAAsBC,MAAtB,CAA8BN,IAA9B,CAAoCT,KAApC,CAA2C,CACzCC,QAAQ,CAACD,KAAD,CAAR,CADyC,GAGjCU,CAAAA,IAHiC,CAGfb,KAHe,CAGjCa,IAHiC,CAG3BC,GAH2B,CAGfd,KAHe,CAG3Bc,GAH2B,CAGtBC,EAHsB,CAGff,KAHe,CAGtBe,EAHsB,CAIzC;AACAV,MAAM,CAACW,IAAP,CAAY,aAAZ,CAA2B,CAAEH,IAAI,CAAJA,IAAF,CAAQC,GAAG,CAAHA,GAAR,CAAaC,EAAE,CAAFA,EAAb,CAA3B,EACD,CAGD,mBACE,2BAAK,SAAS,4BAAsBN,IAAI,CAAG,EAAH,CAAQ,WAAlC,CAAd,eACE,2BAAK,SAAS,CAAC,cAAf,EACGP,WADH,cAEE,8BACE,IAAI,CAAC,QADP,CAEE,SAAS,CAAC,qBAFZ,CAGE,OAAO,CAAE,yBAAMQ,CAAAA,OAAO,CAAC,SAAAS,QAAQ,QAAI,CAACA,QAAL,EAAT,CAAb,EAHX,eAKE,oBAAC,eAAD,EAAiB,IAAI,CAAEV,IAAI,CAAGZ,aAAH,CAAmBC,WAA9C,EALF,CAFF,CADF,cAWE,oBAAC,gBAAD,EACE,cAAc,CAAEmB,YADlB,CAEE,KAAK,CAAEd,KAFT,CAGE,SAAS,CAAC,qBAHZ,CAIE,MAAM,CAAEE,MAJV,CAKE,OAAO,CAAE,CACPe,YAAY,CAAE,IADP,CAEPC,IAAI,CAAE,IAFC,CAGPC,IAAI,CAAErB,QAHC,CAIPsB,KAAK,CAAE,UAJA,CAKPC,WAAW,CAAE,IALN,CALX,EAXF,CADF,CA2BD","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Editor(props) {\n  const {\n    language,\n    displayName,\n    value,\n    onChange,\n    socket, \n    setHtml,\n    setCss,\n    setJs,\n  } = props;\n\n  const [open, setOpen] = useState(true);\n  useEffect(() => {\n    socket.on('code-update', (data) => {\n      setHtml(data.html);\n      setCss(data.css);\n      setJs(data.js);\n      socket.emit('code-update', { data});\n    });\n    // const { html, css, js } = props; \n\n  }, []);\n\n  // Handle code changes when a user interacts with the editor\n  function handleChange(editor, data, value) {\n    onChange(value);\n   \n    const { html, css, js } = props; \n    // Emit code changes to be shared with other connected clients\n    socket.emit('code-update', { html, css, js });\n  }\n\n\n  return (\n    <div className={`editor-container ${open ? '' : 'collapsed'}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          type=\"button\"\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen(prevOpen => !prevOpen)}\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        socket={socket}\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          theme: 'material',\n          lineNumbers: true\n        }}\n      />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}