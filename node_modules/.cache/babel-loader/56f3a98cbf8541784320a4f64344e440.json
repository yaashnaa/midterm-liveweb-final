{"ast":null,"code":"var _jsxFileName = \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/src/components/Editor.js\";\nimport React, { useState, useEffect } from 'react';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons';\nexport default function Editor(props) {\n  const {\n    language,\n    displayName,\n    value,\n    onChange,\n    socket,\n    setHtml,\n    setCss,\n    setJs\n  } = props;\n  const [open, setOpen] = useState(true); // Handle code changes when a user interacts with the editor\n\n  function handleChange(editor, data, value) {\n    useEffect(() => {\n      socket.on('code-update', data => {\n        setHtml(data.html);\n        setCss(data.css);\n        setJs(data.js);\n        socket.emit('code-update', {\n          data\n        });\n      }); // const { html, css, js } = props; \n    }, []);\n    onChange(value);\n    const {\n      html,\n      css,\n      js\n    } = props; // Emit code changes to be shared with other connected clients\n\n    socket.emit('code-update', {\n      html,\n      css,\n      js\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `editor-container ${open ? '' : 'collapsed'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, displayName, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"expand-collapse-btn\",\n    onClick: () => setOpen(prevOpen => !prevOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: open ? faCompressAlt : faExpandAlt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(ControlledEditor, {\n    onBeforeChange: handleChange,\n    value: value,\n    className: \"code-mirror-wrapper\",\n    options: {\n      lineWrapping: true,\n      lint: true,\n      mode: language,\n      theme: 'material',\n      lineNumbers: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/src/components/Editor.js"],"names":["React","useState","useEffect","Controlled","ControlledEditor","FontAwesomeIcon","faCompressAlt","faExpandAlt","Editor","props","language","displayName","value","onChange","socket","setHtml","setCss","setJs","open","setOpen","handleChange","editor","data","on","html","css","js","emit","prevOpen","lineWrapping","lint","mode","theme","lineNumbers"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAO,+BAAP;AACA,OAAO,+BAAP;AACA,OAAO,yBAAP;AACA,OAAO,uCAAP;AACA,OAAO,yBAAP;AACA,SAASC,UAAU,IAAIC,gBAAvB,QAA+C,mBAA/C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,mCAA3C;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACpC,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,MAPI;AAQJC,IAAAA;AARI,MASFR,KATJ;AAWA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,IAAD,CAAhC,CAZoC,CAepC;;AACA,WAASmB,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCV,KAApC,EAA2C;AACzCV,IAAAA,SAAS,CAAC,MAAM;AACdY,MAAAA,MAAM,CAACS,EAAP,CAAU,aAAV,EAA0BD,IAAD,IAAU;AACjCP,QAAAA,OAAO,CAACO,IAAI,CAACE,IAAN,CAAP;AACAR,QAAAA,MAAM,CAACM,IAAI,CAACG,GAAN,CAAN;AACAR,QAAAA,KAAK,CAACK,IAAI,CAACI,EAAN,CAAL;AACAZ,QAAAA,MAAM,CAACa,IAAP,CAAY,aAAZ,EAA2B;AAAEL,UAAAA;AAAF,SAA3B;AACD,OALD,EADc,CAOd;AAED,KATQ,EASN,EATM,CAAT;AAUAT,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACA,UAAM;AAAEY,MAAAA,IAAF;AAAQC,MAAAA,GAAR;AAAaC,MAAAA;AAAb,QAAoBjB,KAA1B,CAZyC,CAazC;;AACAK,IAAAA,MAAM,CAACa,IAAP,CAAY,aAAZ,EAA2B;AAAEH,MAAAA,IAAF;AAAQC,MAAAA,GAAR;AAAaC,MAAAA;AAAb,KAA3B;AACD;;AAGD,sBACE;AAAK,IAAA,SAAS,EAAG,oBAAmBR,IAAI,GAAG,EAAH,GAAQ,WAAY,EAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,WADH,eAEE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,qBAFZ;AAGE,IAAA,OAAO,EAAE,MAAMQ,OAAO,CAACS,QAAQ,IAAI,CAACA,QAAd,CAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEV,IAAI,GAAGZ,aAAH,GAAmBC,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAFF,CADF,eAWE,oBAAC,gBAAD;AACE,IAAA,cAAc,EAAEa,YADlB;AAEE,IAAA,KAAK,EAAER,KAFT;AAGE,IAAA,SAAS,EAAC,qBAHZ;AAIE,IAAA,OAAO,EAAE;AACPiB,MAAAA,YAAY,EAAE,IADP;AAEPC,MAAAA,IAAI,EAAE,IAFC;AAGPC,MAAAA,IAAI,EAAErB,QAHC;AAIPsB,MAAAA,KAAK,EAAE,UAJA;AAKPC,MAAAA,WAAW,EAAE;AALN,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AA0BD","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Editor(props) {\n  const {\n    language,\n    displayName,\n    value,\n    onChange,\n    socket, \n    setHtml,\n    setCss,\n    setJs,\n  } = props;\n\n  const [open, setOpen] = useState(true);\n  \n\n  // Handle code changes when a user interacts with the editor\n  function handleChange(editor, data, value) {\n    useEffect(() => {\n      socket.on('code-update', (data) => {\n        setHtml(data.html);\n        setCss(data.css);\n        setJs(data.js);\n        socket.emit('code-update', { data});\n      });\n      // const { html, css, js } = props; \n  \n    }, []);\n    onChange(value);\n    const { html, css, js } = props; \n    // Emit code changes to be shared with other connected clients\n    socket.emit('code-update', { html, css, js });\n  }\n\n\n  return (\n    <div className={`editor-container ${open ? '' : 'collapsed'}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          type=\"button\"\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen(prevOpen => !prevOpen)}\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          theme: 'material',\n          lineNumbers: true\n        }}\n      />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}