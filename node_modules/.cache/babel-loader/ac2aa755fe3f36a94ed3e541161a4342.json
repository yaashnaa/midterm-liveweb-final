{"ast":null,"code":"import _classCallCheck from \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\"; // detect ReactNative environment\n\nvar isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nexport var WS = /*#__PURE__*/function (_Transport) {\n  _inherits(WS, _Transport);\n\n  var _super = _createSuper(WS);\n\n  /**\n   * WebSocket transport constructor.\n   *\n   * @param {Object} opts - connection options\n   * @protected\n   */\n  function WS(opts) {\n    var _this;\n\n    _classCallCheck(this, WS);\n\n    _this = _super.call(this, opts);\n    _this.supportsBinary = !opts.forceBase64;\n    return _this;\n  }\n\n  _createClass(WS, [{\n    key: \"doOpen\",\n    value: function doOpen() {\n      if (!this.check()) {\n        // let probe timeout\n        return;\n      }\n\n      var uri = this.uri();\n      var protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n      var opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n\n      if (this.opts.extraHeaders) {\n        opts.headers = this.opts.extraHeaders;\n      }\n\n      try {\n        this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n      } catch (err) {\n        return this.emitReserved(\"error\", err);\n      }\n\n      this.ws.binaryType = this.socket.binaryType;\n      this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      var _this2 = this;\n\n      this.ws.onopen = function () {\n        if (_this2.opts.autoUnref) {\n          _this2.ws._socket.unref();\n        }\n\n        _this2.onOpen();\n      };\n\n      this.ws.onclose = function (closeEvent) {\n        return _this2.onClose({\n          description: \"websocket connection closed\",\n          context: closeEvent\n        });\n      };\n\n      this.ws.onmessage = function (ev) {\n        return _this2.onData(ev.data);\n      };\n\n      this.ws.onerror = function (e) {\n        return _this2.onError(\"websocket error\", e);\n      };\n    }\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this3 = this;\n\n      this.writable = false; // encodePacket efficient as it uses WS framing\n      // no need for encodePayload\n\n      var _loop = function _loop(i) {\n        var packet = packets[i];\n        var lastPacket = i === packets.length - 1;\n        encodePacket(packet, _this3.supportsBinary, function (data) {\n          // always create a new object (GH-437)\n          var opts = {};\n\n          if (!usingBrowserWebSocket) {\n            if (packet.options) {\n              opts.compress = packet.options.compress;\n            }\n\n            if (_this3.opts.perMessageDeflate) {\n              var len = // @ts-ignore\n              \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n              if (len < _this3.opts.perMessageDeflate.threshold) {\n                opts.compress = false;\n              }\n            }\n          } // Sometimes the websocket has already been closed but the browser didn't\n          // have a chance of informing us about it yet, in that case send will\n          // throw an error\n\n\n          try {\n            if (usingBrowserWebSocket) {\n              // TypeError is thrown when passing the second argument on Safari\n              _this3.ws.send(data);\n            } else {\n              _this3.ws.send(data, opts);\n            }\n          } catch (e) {}\n\n          if (lastPacket) {\n            // fake drain\n            // defer to next tick to allow Socket to clear writeBuffer\n            nextTick(function () {\n              _this3.writable = true;\n\n              _this3.emitReserved(\"drain\");\n            }, _this3.setTimeoutFn);\n          }\n        });\n      };\n\n      for (var i = 0; i < packets.length; i++) {\n        _loop(i);\n      }\n    }\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      if (typeof this.ws !== \"undefined\") {\n        this.ws.close();\n        this.ws = null;\n      }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var schema = this.opts.secure ? \"wss\" : \"ws\";\n      var query = this.query || {}; // append timestamp to URI\n\n      if (this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      } // communicate binary support capabilities\n\n\n      if (!this.supportsBinary) {\n        query.b64 = 1;\n      }\n\n      return this.createUri(schema, query);\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @private\n     */\n\n  }, {\n    key: \"check\",\n    value: function check() {\n      return !!WebSocket;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return \"websocket\";\n    }\n  }]);\n\n  return WS;\n}(Transport);","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/engine.io-client/build/esm/transports/websocket.js"],"names":["Transport","yeast","pick","nextTick","usingBrowserWebSocket","WebSocket","encodePacket","isReactNative","navigator","product","toLowerCase","WS","opts","supportsBinary","forceBase64","check","uri","protocols","extraHeaders","headers","ws","err","emitReserved","binaryType","socket","addEventListeners","onopen","autoUnref","_socket","unref","onOpen","onclose","closeEvent","onClose","description","context","onmessage","ev","onData","data","onerror","e","onError","packets","writable","i","packet","lastPacket","length","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","setTimeoutFn","close","schema","secure","query","timestampRequests","timestampParam","b64","createUri"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { nextTick, usingBrowserWebSocket, WebSocket, } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @param {Object} opts - connection options\n     * @protected\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @private\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}