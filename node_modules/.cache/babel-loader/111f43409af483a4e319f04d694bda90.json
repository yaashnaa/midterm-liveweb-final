{"ast":null,"code":"import _classCallCheck from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/yashna/Desktop/midterm-liveweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { defaultBinaryType } from \"./transports/websocket-constructor.js\";\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri - uri or options\n   * @param {Object} opts - options\n   */\n  function Socket(uri) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.binaryType = defaultBinaryType;\n    _this.writeBuffer = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parse(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parse(opts.host).host;\n    }\n\n    installTimerFunctions(_assertThisInitialized(_this), opts);\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n    _this.transports = opts.transports || [\"polling\", \"websocket\", \"webtransport\"];\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: false\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + (_this.opts.addTrailingSlash ? \"/\" : \"\");\n\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = decode(_this.opts.query);\n    } // set on handshake\n\n\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null; // set on heartbeat\n\n    _this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (_this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        _this.beforeunloadEventListener = function () {\n          if (_this.transport) {\n            // silently close the transport\n            _this.transport.removeAllListeners();\n\n            _this.transport.close();\n          }\n        };\n\n        addEventListener(\"beforeunload\", _this.beforeunloadEventListener, false);\n      }\n\n      if (_this.hostname !== \"localhost\") {\n        _this.offlineEventListener = function () {\n          _this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n\n        addEventListener(\"offline\", _this.offlineEventListener, false);\n      }\n    }\n\n    _this.open();\n\n    return _this;\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} name - transport name\n   * @return {Transport}\n   * @private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      var query = Object.assign({}, this.opts.query); // append engine.io protocol identifier\n\n      query.EIO = protocol; // transport name\n\n      query.transport = name; // session id if we already have one\n\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }, this.opts.transportOptions[name]);\n      return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n\n      var transport;\n\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(function () {\n          _this2.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n\n      this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        this.transports.shift();\n        this.open();\n        return;\n      }\n\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var _this3 = this;\n\n      if (this.transport) {\n        this.transport.removeAllListeners();\n      } // set up transport\n\n\n      this.transport = transport; // set up transport listeners\n\n      transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", function (reason) {\n        return _this3.onClose(\"transport close\", reason);\n      });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      var _this4 = this;\n\n      var transport = this.createTransport(name);\n      var failed = false;\n      Socket.priorWebsocketSuccess = false;\n\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            _this4.upgrading = true;\n\n            _this4.emitReserved(\"upgrading\", transport);\n\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n            _this4.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this4.readyState) return;\n              cleanup();\n\n              _this4.setTransport(transport);\n\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n\n              _this4.emitReserved(\"upgrade\", transport);\n\n              transport = null;\n              _this4.upgrading = false;\n\n              _this4.flush();\n            });\n          } else {\n            var err = new Error(\"probe error\"); // @ts-ignore\n\n            err.transport = transport.name;\n\n            _this4.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n\n      function freezeTransport() {\n        if (failed) return; // Any callback called by transport should be ignored since now\n\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      } // Handle any error that happens while probing\n\n\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err); // @ts-ignore\n\n        error.transport = transport.name;\n        freezeTransport();\n\n        _this4.emitReserved(\"upgradeError\", error);\n      };\n\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      } // When the socket is closed while we're probing\n\n\n      function onclose() {\n        onerror(\"socket closed\");\n      } // When the socket is upgraded while we're probing\n\n\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          freezeTransport();\n        }\n      } // Remove all listeners on the transport and on self\n\n\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n\n        _this4.off(\"close\", onclose);\n\n        _this4.off(\"upgrading\", onupgrade);\n      };\n\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n\n      if (this.upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n        // favor WebTransport\n        this.setTimeoutFn(function () {\n          if (!failed) {\n            transport.open();\n          }\n        }, 200);\n      } else {\n        transport.open();\n      }\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush(); // we check for `readyState` in case an `open`\n      // listener already closed the socket\n\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        var i = 0;\n        var l = this.upgrades.length;\n\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n        this.emitReserved(\"heartbeat\");\n        this.resetPingTimeout();\n\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n\n          case \"ping\":\n            this.sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            break;\n\n          case \"error\":\n            var err = new Error(\"server error\"); // @ts-ignore\n\n            err.code = packet.data;\n            this.onError(err);\n            break;\n\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {}\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.maxPayload = data.maxPayload;\n      this.onOpen(); // In case open handler closes socket\n\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this5 = this;\n\n      this.clearTimeoutFn(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = this.setTimeoutFn(function () {\n        _this5.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n\n      if (this.opts.autoUnref) {\n        this.pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n\n      this.prevBufferLen = 0;\n\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        var packets = this.getWritablePackets();\n        this.transport.send(packets); // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n\n        this.prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n\n  }, {\n    key: \"getWritablePackets\",\n    value: function getWritablePackets() {\n      var shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n\n      var payloadSize = 1; // first packet type\n\n      for (var i = 0; i < this.writeBuffer.length; i++) {\n        var data = this.writeBuffer[i].data;\n\n        if (data) {\n          payloadSize += byteLength(data);\n        }\n\n        if (i > 0 && payloadSize > this.maxPayload) {\n          return this.writeBuffer.slice(0, i);\n        }\n\n        payloadSize += 2; // separator + packet type\n      }\n\n      return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @return {Socket} for chaining.\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n\n      var close = function close() {\n        _this6.onClose(\"forced close\");\n\n        _this6.transport.close();\n      };\n\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.off(\"upgrade\", cleanupAndClose);\n\n        _this6.off(\"upgradeError\", cleanupAndClose);\n\n        close();\n      };\n\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      Socket.priorWebsocketSuccess = false;\n      this.emitReserved(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        // clear timers\n        this.clearTimeoutFn(this.pingTimeoutTimer); // stop event from firing again for transport\n\n        this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n        this.transport.close(); // ignore further transport communication\n\n        this.transport.removeAllListeners();\n\n        if (typeof removeEventListener === \"function\") {\n          removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n          removeEventListener(\"offline\", this.offlineEventListener, false);\n        } // set ready state\n\n\n        this.readyState = \"closed\"; // clear session id\n\n        this.id = null; // emit close event\n\n        this.emitReserved(\"close\", reason, description); // clean buffers after, so users can still\n        // grab the buffers on `close` event\n\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n      }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n\n      return filteredUpgrades;\n    }\n  }]);\n\n  return Socket;\n}(Emitter);\nSocket.protocol = protocol;","map":{"version":3,"sources":["/Users/yashna/Desktop/midterm-liveweb/node_modules/engine.io-client/build/esm/socket.js"],"names":["transports","installTimerFunctions","byteLength","decode","parse","Emitter","protocol","defaultBinaryType","Socket","uri","opts","binaryType","writeBuffer","hostname","host","secure","port","query","location","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","beforeunloadEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","name","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","readyState","createTransport","e","shift","setTransport","on","onDrain","bind","onPacket","onError","reason","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","i","l","probe","packet","resetPingTimeout","onHandshake","JSON","sendPacket","code","filterUpgrades","maxPayload","onOpen","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","shouldCheckPayloadSize","payloadSize","slice","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j"],"mappings":"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","sourcesContent":["import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { defaultBinaryType } from \"./transports/websocket-constructor.js\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts = {}) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\n            \"polling\",\n            \"websocket\",\n            \"webtransport\",\n        ];\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this.beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", (reason) => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this.upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            this.resetPingTimeout();\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\n"]},"metadata":{},"sourceType":"module"}