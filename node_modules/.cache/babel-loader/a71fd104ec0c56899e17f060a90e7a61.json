{"ast":null,"code":"import _classCallCheck from \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Transport } from \"../transport.js\";\nimport { nextTick } from \"./websocket-constructor.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream } from \"engine.io-parser\";\nexport var WT = /*#__PURE__*/function (_Transport) {\n  _inherits(WT, _Transport);\n\n  var _super = _createSuper(WT);\n\n  function WT() {\n    _classCallCheck(this, WT);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WT, [{\n    key: \"doOpen\",\n    value: function doOpen() {\n      var _this = this;\n\n      // @ts-ignore\n      if (typeof WebTransport !== \"function\") {\n        return;\n      } // @ts-ignore\n\n\n      this.transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n      this.transport.closed.then(function () {\n        _this.onClose();\n      }).catch(function (err) {\n        _this.onError(\"webtransport error\", err);\n      }); // note: we could have used async/await, but that would require some additional polyfills\n\n      this.transport.ready.then(function () {\n        _this.transport.createBidirectionalStream().then(function (stream) {\n          var decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, _this.socket.binaryType);\n          var reader = stream.readable.pipeThrough(decoderStream).getReader();\n          var encoderStream = createPacketEncoderStream();\n          encoderStream.readable.pipeTo(stream.writable);\n          _this.writer = encoderStream.writable.getWriter();\n\n          var read = function read() {\n            reader.read().then(function (_ref) {\n              var done = _ref.done,\n                  value = _ref.value;\n\n              if (done) {\n                return;\n              }\n\n              _this.onPacket(value);\n\n              read();\n            }).catch(function (err) {});\n          };\n\n          read();\n          var packet = {\n            type: \"open\"\n          };\n\n          if (_this.query.sid) {\n            packet.data = \"{\\\"sid\\\":\\\"\".concat(_this.query.sid, \"\\\"}\");\n          }\n\n          _this.writer.write(packet).then(function () {\n            return _this.onOpen();\n          });\n        });\n      });\n    }\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this2 = this;\n\n      this.writable = false;\n\n      var _loop = function _loop(i) {\n        var packet = packets[i];\n        var lastPacket = i === packets.length - 1;\n\n        _this2.writer.write(packet).then(function () {\n          if (lastPacket) {\n            nextTick(function () {\n              _this2.writable = true;\n\n              _this2.emitReserved(\"drain\");\n            }, _this2.setTimeoutFn);\n          }\n        });\n      };\n\n      for (var i = 0; i < packets.length; i++) {\n        _loop(i);\n      }\n    }\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _a;\n\n      (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return \"webtransport\";\n    }\n  }]);\n\n  return WT;\n}(Transport);","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/engine.io-client/build/esm/transports/webtransport.js"],"names":["Transport","nextTick","createPacketDecoderStream","createPacketEncoderStream","WT","WebTransport","transport","createUri","opts","transportOptions","name","closed","then","onClose","catch","err","onError","ready","createBidirectionalStream","stream","decoderStream","Number","MAX_SAFE_INTEGER","socket","binaryType","reader","readable","pipeThrough","getReader","encoderStream","pipeTo","writable","writer","getWriter","read","done","value","onPacket","packet","type","query","sid","data","write","onOpen","packets","i","lastPacket","length","emitReserved","setTimeoutFn","_a","close"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\nimport { nextTick } from \"./websocket-constructor.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream, } from \"engine.io-parser\";\nexport class WT extends Transport {\n    get name() {\n        return \"webtransport\";\n    }\n    doOpen() {\n        // @ts-ignore\n        if (typeof WebTransport !== \"function\") {\n            return;\n        }\n        // @ts-ignore\n        this.transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n        this.transport.closed\n            .then(() => {\n            this.onClose();\n        })\n            .catch((err) => {\n            this.onError(\"webtransport error\", err);\n        });\n        // note: we could have used async/await, but that would require some additional polyfills\n        this.transport.ready.then(() => {\n            this.transport.createBidirectionalStream().then((stream) => {\n                const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n                const reader = stream.readable.pipeThrough(decoderStream).getReader();\n                const encoderStream = createPacketEncoderStream();\n                encoderStream.readable.pipeTo(stream.writable);\n                this.writer = encoderStream.writable.getWriter();\n                const read = () => {\n                    reader\n                        .read()\n                        .then(({ done, value }) => {\n                        if (done) {\n                            return;\n                        }\n                        this.onPacket(value);\n                        read();\n                    })\n                        .catch((err) => {\n                    });\n                };\n                read();\n                const packet = { type: \"open\" };\n                if (this.query.sid) {\n                    packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n                }\n                this.writer.write(packet).then(() => this.onOpen());\n            });\n        });\n    }\n    write(packets) {\n        this.writable = false;\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            this.writer.write(packet).then(() => {\n                if (lastPacket) {\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        var _a;\n        (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}