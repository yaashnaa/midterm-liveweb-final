{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = exports.RESERVED_EVENTS = void 0;\n\nconst socket_io_parser_1 = require(\"socket.io-parser\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst typed_events_1 = require(\"./typed-events\");\n\nconst base64id_1 = __importDefault(require(\"base64id\"));\n\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\n\nconst debug = (0, debug_1.default)(\"socket.io:socket\");\nconst RECOVERABLE_DISCONNECT_REASONS = new Set([\"transport error\", \"transport close\", \"forced close\", \"ping timeout\", \"server shutting down\", \"forced server close\"]);\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\"]);\n\nfunction noop() {}\n/**\n * This is the main object for interacting with a client.\n *\n * A Socket belongs to a given {@link Namespace} and uses an underlying {@link Client} to communicate.\n *\n * Within each {@link Namespace}, you can also define arbitrary channels (called \"rooms\") that the {@link Socket} can\n * join and leave. That provides a convenient way to broadcast to a group of socket instances.\n *\n * @example\n * io.on(\"connection\", (socket) => {\n *   console.log(`socket ${socket.id} connected`);\n *\n *   // send an event to the client\n *   socket.emit(\"foo\", \"bar\");\n *\n *   socket.on(\"foobar\", () => {\n *     // an event was received from the client\n *   });\n *\n *   // join the room named \"room1\"\n *   socket.join(\"room1\");\n *\n *   // broadcast to everyone in the room named \"room1\"\n *   io.to(\"room1\").emit(\"hello\");\n *\n *   // upon disconnection\n *   socket.on(\"disconnect\", (reason) => {\n *     console.log(`socket ${socket.id} disconnected due to ${reason}`);\n *   });\n * });\n */\n\n\nclass Socket extends typed_events_1.StrictEventEmitter {\n  /**\n   * Interface to a `Client` for a given `Namespace`.\n   *\n   * @param {Namespace} nsp\n   * @param {Client} client\n   * @param {Object} auth\n   * @package\n   */\n  constructor(nsp, client, auth, previousSession) {\n    super();\n    this.nsp = nsp;\n    this.client = client;\n    /**\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n     * be transmitted to the client, the data attribute and the rooms will be restored.\n     */\n\n    this.recovered = false;\n    /**\n     * Additional information that can be attached to the Socket instance and which will be used in the\n     * {@link Server.fetchSockets()} method.\n     */\n\n    this.data = {};\n    /**\n     * Whether the socket is currently connected or not.\n     *\n     * @example\n     * io.use((socket, next) => {\n     *   console.log(socket.connected); // false\n     *   next();\n     * });\n     *\n     * io.on(\"connection\", (socket) => {\n     *   console.log(socket.connected); // true\n     * });\n     */\n\n    this.connected = false;\n    this.acks = new Map();\n    this.fns = [];\n    this.flags = {};\n    this.server = nsp.server;\n    this.adapter = this.nsp.adapter;\n\n    if (previousSession) {\n      this.id = previousSession.sid;\n      this.pid = previousSession.pid;\n      previousSession.rooms.forEach(room => this.join(room));\n      this.data = previousSession.data;\n      previousSession.missedPackets.forEach(packet => {\n        this.packet({\n          type: socket_io_parser_1.PacketType.EVENT,\n          data: packet\n        });\n      });\n      this.recovered = true;\n    } else {\n      if (client.conn.protocol === 3) {\n        // @ts-ignore\n        this.id = nsp.name !== \"/\" ? nsp.name + \"#\" + client.id : client.id;\n      } else {\n        this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n      }\n\n      if (this.server._opts.connectionStateRecovery) {\n        this.pid = base64id_1.default.generateId();\n      }\n    }\n\n    this.handshake = this.buildHandshake(auth); // prevents crash when the socket receives an \"error\" event without listener\n\n    this.on(\"error\", noop);\n  }\n  /**\n   * Builds the `handshake` BC object\n   *\n   * @private\n   */\n\n\n  buildHandshake(auth) {\n    var _a, _b, _c, _d;\n\n    return {\n      headers: ((_a = this.request) === null || _a === void 0 ? void 0 : _a.headers) || {},\n      time: new Date() + \"\",\n      address: this.conn.remoteAddress,\n      xdomain: !!((_b = this.request) === null || _b === void 0 ? void 0 : _b.headers.origin),\n      // @ts-ignore\n      secure: !this.request || !!this.request.connection.encrypted,\n      issued: +new Date(),\n      url: (_c = this.request) === null || _c === void 0 ? void 0 : _c.url,\n      // @ts-ignore\n      query: ((_d = this.request) === null || _d === void 0 ? void 0 : _d._query) || {},\n      auth\n    };\n  }\n  /**\n   * Emits to this client.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.emit(\"hello\", \"world\");\n   *\n   *   // all serializable datastructures are supported (no need to call JSON.stringify)\n   *   socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Buffer.from([6]) });\n   *\n   *   // with an acknowledgement from the client\n   *   socket.emit(\"hello\", \"world\", (val) => {\n   *     // ...\n   *   });\n   * });\n   *\n   * @return Always returns `true`.\n   */\n\n\n  emit(ev, ...args) {\n    if (exports.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${String(ev)}\" is a reserved event name`);\n    }\n\n    const data = [ev, ...args];\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: data\n    }; // access last argument to see if it's an ACK callback\n\n    if (typeof data[data.length - 1] === \"function\") {\n      const id = this.nsp._ids++;\n      debug(\"emitting packet with ack id %d\", id);\n      this.registerAckCallback(id, data.pop());\n      packet.id = id;\n    }\n\n    const flags = Object.assign({}, this.flags);\n    this.flags = {}; // @ts-ignore\n\n    if (this.nsp.server.opts.connectionStateRecovery) {\n      // this ensures the packet is stored and can be transmitted upon reconnection\n      this.adapter.broadcast(packet, {\n        rooms: new Set([this.id]),\n        except: new Set(),\n        flags\n      });\n    } else {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet, flags);\n    }\n\n    return true;\n  }\n  /**\n   * Emits an event and waits for an acknowledgement\n   *\n   * @example\n   * io.on(\"connection\", async (socket) => {\n   *   // without timeout\n   *   const response = await socket.emitWithAck(\"hello\", \"world\");\n   *\n   *   // with a specific timeout\n   *   try {\n   *     const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n   *   } catch (err) {\n   *     // the client did not acknowledge the event in the given delay\n   *   }\n   * });\n   *\n   * @return a Promise that will be fulfilled when the client acknowledges the event\n   */\n\n\n  emitWithAck(ev, ...args) {\n    // the timeout flag is optional\n    const withErr = this.flags.timeout !== undefined;\n    return new Promise((resolve, reject) => {\n      args.push((arg1, arg2) => {\n        if (withErr) {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        } else {\n          return resolve(arg1);\n        }\n      });\n      this.emit(ev, ...args);\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  registerAckCallback(id, ack) {\n    const timeout = this.flags.timeout;\n\n    if (timeout === undefined) {\n      this.acks.set(id, ack);\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n      this.acks.delete(id);\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    this.acks.set(id, (...args) => {\n      clearTimeout(timer);\n      ack.apply(this, [null, ...args]);\n    });\n  }\n  /**\n   * Targets a room when broadcasting.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   // the “foo” event will be broadcast to all connected clients in the “room-101” room, except this socket\n   *   socket.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   *   // the code above is equivalent to:\n   *   io.to(\"room-101\").except(socket.id).emit(\"foo\", \"bar\");\n   *\n   *   // with an array of rooms (a client will be notified at most once)\n   *   socket.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   *   // with multiple chained calls\n   *   socket.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n   * });\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  to(room) {\n    return this.newBroadcastOperator().to(room);\n  }\n  /**\n   * Targets a room when broadcasting. Similar to `to()`, but might feel clearer in some cases:\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   // disconnect all clients in the \"room-101\" room, except this socket\n   *   socket.in(\"room-101\").disconnectSockets();\n   * });\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  in(room) {\n    return this.newBroadcastOperator().in(room);\n  }\n  /**\n   * Excludes a room when broadcasting.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n   *   // and this socket\n   *   socket.except(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   *   // with an array of rooms\n   *   socket.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   *   // with multiple chained calls\n   *   socket.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n   * });\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  except(room) {\n    return this.newBroadcastOperator().except(room);\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * This method mimics the WebSocket.send() method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.send(\"hello\");\n   *\n   *   // this is equivalent to\n   *   socket.emit(\"message\", \"hello\");\n   * });\n   *\n   * @return self\n   */\n\n\n  send(...args) {\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a `message` event. Alias of {@link send}.\n   *\n   * @return self\n   */\n\n\n  write(...args) {\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Writes a packet.\n   *\n   * @param {Object} packet - packet object\n   * @param {Object} opts - options\n   * @private\n   */\n\n\n  packet(packet, opts = {}) {\n    packet.nsp = this.nsp.name;\n    opts.compress = false !== opts.compress;\n\n    this.client._packet(packet, opts);\n  }\n  /**\n   * Joins a room.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   // join a single room\n   *   socket.join(\"room1\");\n   *\n   *   // join multiple rooms\n   *   socket.join([\"room1\", \"room2\"]);\n   * });\n   *\n   * @param {String|Array} rooms - room or array of rooms\n   * @return a Promise or nothing, depending on the adapter\n   */\n\n\n  join(rooms) {\n    debug(\"join room %s\", rooms);\n    return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n  }\n  /**\n   * Leaves a room.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   // leave a single room\n   *   socket.leave(\"room1\");\n   *\n   *   // leave multiple rooms\n   *   socket.leave(\"room1\").leave(\"room2\");\n   * });\n   *\n   * @param {String} room\n   * @return a Promise or nothing, depending on the adapter\n   */\n\n\n  leave(room) {\n    debug(\"leave room %s\", room);\n    return this.adapter.del(this.id, room);\n  }\n  /**\n   * Leave all rooms.\n   *\n   * @private\n   */\n\n\n  leaveAll() {\n    this.adapter.delAll(this.id);\n  }\n  /**\n   * Called by `Namespace` upon successful\n   * middleware execution (ie: authorization).\n   * Socket is added to namespace array before\n   * call to join, so adapters can access it.\n   *\n   * @private\n   */\n\n\n  _onconnect() {\n    debug(\"socket connected - writing packet\");\n    this.connected = true;\n    this.join(this.id);\n\n    if (this.conn.protocol === 3) {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT\n      });\n    } else {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT,\n        data: {\n          sid: this.id,\n          pid: this.pid\n        }\n      });\n    }\n  }\n  /**\n   * Called with each packet. Called by `Client`.\n   *\n   * @param {Object} packet\n   * @private\n   */\n\n\n  _onpacket(packet) {\n    debug(\"got packet %j\", packet);\n\n    switch (packet.type) {\n      case socket_io_parser_1.PacketType.EVENT:\n        this.onevent(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.ACK:\n        this.onack(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n    }\n  }\n  /**\n   * Called upon event packet.\n   *\n   * @param {Packet} packet - packet object\n   * @private\n   */\n\n\n  onevent(packet) {\n    const args = packet.data || [];\n    debug(\"emitting event %j\", args);\n\n    if (null != packet.id) {\n      debug(\"attaching ack callback to event\");\n      args.push(this.ack(packet.id));\n    }\n\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n\n    this.dispatch(args);\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @param {Number} id - packet id\n   * @private\n   */\n\n\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      const args = Array.prototype.slice.call(arguments);\n      debug(\"sending ack %j\", args);\n      self.packet({\n        id: id,\n        type: socket_io_parser_1.PacketType.ACK,\n        data: args\n      });\n      sent = true;\n    };\n  }\n  /**\n   * Called upon ack packet.\n   *\n   * @private\n   */\n\n\n  onack(packet) {\n    const ack = this.acks.get(packet.id);\n\n    if (\"function\" == typeof ack) {\n      debug(\"calling ack %s with %j\", packet.id, packet.data);\n      ack.apply(this, packet.data);\n      this.acks.delete(packet.id);\n    } else {\n      debug(\"bad ack %s\", packet.id);\n    }\n  }\n  /**\n   * Called upon client disconnect packet.\n   *\n   * @private\n   */\n\n\n  ondisconnect() {\n    debug(\"got disconnect packet\");\n\n    this._onclose(\"client namespace disconnect\");\n  }\n  /**\n   * Handles a client error.\n   *\n   * @private\n   */\n\n\n  _onerror(err) {\n    // FIXME the meaning of the \"error\" event is overloaded:\n    //  - it can be sent by the client (`socket.emit(\"error\")`)\n    //  - it can be emitted when the connection encounters an error (an invalid packet for example)\n    //  - it can be emitted when a packet is rejected in a middleware (`socket.use()`)\n    this.emitReserved(\"error\", err);\n  }\n  /**\n   * Called upon closing. Called by `Client`.\n   *\n   * @param {String} reason\n   * @param description\n   * @throw {Error} optional error object\n   *\n   * @private\n   */\n\n\n  _onclose(reason, description) {\n    if (!this.connected) return this;\n    debug(\"closing socket - reason %s\", reason);\n    this.emitReserved(\"disconnecting\", reason, description);\n\n    if (this.server._opts.connectionStateRecovery && RECOVERABLE_DISCONNECT_REASONS.has(reason)) {\n      debug(\"connection state recovery is enabled for sid %s\", this.id);\n      this.adapter.persistSession({\n        sid: this.id,\n        pid: this.pid,\n        rooms: [...this.rooms],\n        data: this.data\n      });\n    }\n\n    this._cleanup();\n\n    this.client._remove(this);\n\n    this.connected = false;\n    this.emitReserved(\"disconnect\", reason, description);\n    return;\n  }\n  /**\n   * Makes the socket leave all the rooms it was part of and prevents it from joining any other room\n   *\n   * @private\n   */\n\n\n  _cleanup() {\n    this.leaveAll();\n\n    this.nsp._remove(this);\n\n    this.join = noop;\n  }\n  /**\n   * Produces an `error` packet.\n   *\n   * @param {Object} err - error object\n   *\n   * @private\n   */\n\n\n  _error(err) {\n    this.packet({\n      type: socket_io_parser_1.PacketType.CONNECT_ERROR,\n      data: err\n    });\n  }\n  /**\n   * Disconnects this client.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   // disconnect this socket (the connection might be kept alive for other namespaces)\n   *   socket.disconnect();\n   *\n   *   // disconnect this socket and close the underlying connection\n   *   socket.disconnect(true);\n   * })\n   *\n   * @param {Boolean} close - if `true`, closes the underlying connection\n   * @return self\n   */\n\n\n  disconnect(close = false) {\n    if (!this.connected) return this;\n\n    if (close) {\n      this.client._disconnect();\n    } else {\n      this.packet({\n        type: socket_io_parser_1.PacketType.DISCONNECT\n      });\n\n      this._onclose(\"server namespace disconnect\");\n    }\n\n    return this;\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.compress(false).emit(\"hello\");\n   * });\n   *\n   * @param {Boolean} compress - if `true`, compresses the sending data\n   * @return {Socket} self\n   */\n\n\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.volatile.emit(\"hello\"); // the client may or may not receive it\n   * });\n   *\n   * @return {Socket} self\n   */\n\n\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n   * sender.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   // the “foo” event will be broadcast to all connected clients, except this socket\n   *   socket.broadcast.emit(\"foo\", \"bar\");\n   * });\n   *\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  get broadcast() {\n    return this.newBroadcastOperator();\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   // the “foo” event will be broadcast to all connected clients on this node, except this socket\n   *   socket.local.emit(\"foo\", \"bar\");\n   * });\n   *\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  get local() {\n    return this.newBroadcastOperator().local;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n   * given number of milliseconds have elapsed without an acknowledgement from the client:\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.timeout(5000).emit(\"my-event\", (err) => {\n   *     if (err) {\n   *       // the client did not acknowledge the event in the given delay\n   *     }\n   *   });\n   * });\n   *\n   * @returns self\n   */\n\n\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\n   * Dispatch incoming event to socket listeners.\n   *\n   * @param {Array} event - event that will get emitted\n   * @private\n   */\n\n\n  dispatch(event) {\n    debug(\"dispatching an event %j\", event);\n    this.run(event, err => {\n      process.nextTick(() => {\n        if (err) {\n          return this._onerror(err);\n        }\n\n        if (this.connected) {\n          super.emitUntyped.apply(this, event);\n        } else {\n          debug(\"ignore packet received after disconnection\");\n        }\n      });\n    });\n  }\n  /**\n   * Sets up socket middleware.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.use(([event, ...args], next) => {\n   *     if (isUnauthorized(event)) {\n   *       return next(new Error(\"unauthorized event\"));\n   *     }\n   *     // do not forget to call next\n   *     next();\n   *   });\n   *\n   *   socket.on(\"error\", (err) => {\n   *     if (err && err.message === \"unauthorized event\") {\n   *       socket.disconnect();\n   *     }\n   *   });\n   * });\n   *\n   * @param {Function} fn - middleware function (event, next)\n   * @return {Socket} self\n   */\n\n\n  use(fn) {\n    this.fns.push(fn);\n    return this;\n  }\n  /**\n   * Executes the middleware for an incoming event.\n   *\n   * @param {Array} event - event that will get emitted\n   * @param {Function} fn - last fn call in the middleware\n   * @private\n   */\n\n\n  run(event, fn) {\n    const fns = this.fns.slice(0);\n    if (!fns.length) return fn(null);\n\n    function run(i) {\n      fns[i](event, function (err) {\n        // upon error, short-circuit\n        if (err) return fn(err); // if no middleware left, summon callback\n\n        if (!fns[i + 1]) return fn(null); // go on to next\n\n        run(i + 1);\n      });\n    }\n\n    run(0);\n  }\n  /**\n   * Whether the socket is currently disconnected\n   */\n\n\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\n   * A reference to the request that originated the underlying Engine.IO Socket.\n   */\n\n\n  get request() {\n    return this.client.request;\n  }\n  /**\n   * A reference to the underlying Client transport connection (Engine.IO Socket object).\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   console.log(socket.conn.transport.name); // prints \"polling\" or \"websocket\"\n   *\n   *   socket.conn.once(\"upgrade\", () => {\n   *     console.log(socket.conn.transport.name); // prints \"websocket\"\n   *   });\n   * });\n   */\n\n\n  get conn() {\n    return this.client.conn;\n  }\n  /**\n   * Returns the rooms the socket is currently in.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   console.log(socket.rooms); // Set { <socket.id> }\n   *\n   *   socket.join(\"room1\");\n   *\n   *   console.log(socket.rooms); // Set { <socket.id>, \"room1\" }\n   * });\n   */\n\n\n  get rooms() {\n    return this.adapter.socketRooms(this.id) || new Set();\n  }\n  /**\n   * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n   * the callback.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.onAny((event, ...args) => {\n   *     console.log(`got event ${event}`);\n   *   });\n   * });\n   *\n   * @param listener\n   */\n\n\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.push(listener);\n\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n   * the callback. The listener is added to the beginning of the listeners array.\n   *\n   * @param listener\n   */\n\n\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.unshift(listener);\n\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is received.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   const catchAllListener = (event, ...args) => {\n   *     console.log(`got event ${event}`);\n   *   }\n   *\n   *   socket.onAny(catchAllListener);\n   *\n   *   // remove a specific listener\n   *   socket.offAny(catchAllListener);\n   *\n   *   // or remove all listeners\n   *   socket.offAny();\n   * });\n   *\n   * @param listener\n   */\n\n\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n\n\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\n   * Adds a listener that will be fired when any event is sent. The event name is passed as the first argument to\n   * the callback.\n   *\n   * Note: acknowledgements sent to the client are not included.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.onAnyOutgoing((event, ...args) => {\n   *     console.log(`sent event ${event}`);\n   *   });\n   * });\n   *\n   * @param listener\n   */\n\n\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n    this._anyOutgoingListeners.push(listener);\n\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   socket.prependAnyOutgoing((event, ...args) => {\n   *     console.log(`sent event ${event}`);\n   *   });\n   * });\n   *\n   * @param listener\n   */\n\n\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n    this._anyOutgoingListeners.unshift(listener);\n\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is sent.\n   *\n   * @example\n   * io.on(\"connection\", (socket) => {\n   *   const catchAllListener = (event, ...args) => {\n   *     console.log(`sent event ${event}`);\n   *   }\n   *\n   *   socket.onAnyOutgoing(catchAllListener);\n   *\n   *   // remove a specific listener\n   *   socket.offAnyOutgoing(catchAllListener);\n   *\n   *   // or remove all listeners\n   *   socket.offAnyOutgoing();\n   * });\n   *\n   * @param listener - the catch-all listener\n   */\n\n\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n\n\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\n   * Notify the listeners for each packet sent (emit or broadcast)\n   *\n   * @param packet\n   *\n   * @private\n   */\n\n\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n\n  newBroadcastOperator() {\n    const flags = Object.assign({}, this.flags);\n    this.flags = {};\n    return new broadcast_operator_1.BroadcastOperator(this.adapter, new Set(), new Set([this.id]), flags);\n  }\n\n}\n\nexports.Socket = Socket;","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/socket.io/dist/socket.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","RESERVED_EVENTS","socket_io_parser_1","require","debug_1","typed_events_1","base64id_1","broadcast_operator_1","debug","default","RECOVERABLE_DISCONNECT_REASONS","Set","noop","StrictEventEmitter","constructor","nsp","client","auth","previousSession","recovered","data","connected","acks","Map","fns","flags","server","adapter","id","sid","pid","rooms","forEach","room","join","missedPackets","packet","type","PacketType","EVENT","conn","protocol","name","generateId","_opts","connectionStateRecovery","handshake","buildHandshake","on","_a","_b","_c","_d","headers","request","time","Date","address","remoteAddress","xdomain","origin","secure","connection","encrypted","issued","url","query","_query","emit","ev","args","has","Error","String","length","_ids","registerAckCallback","pop","assign","opts","broadcast","except","notifyOutgoingListeners","emitWithAck","withErr","timeout","undefined","Promise","resolve","reject","push","arg1","arg2","ack","set","timer","setTimeout","delete","call","clearTimeout","apply","to","newBroadcastOperator","in","send","write","compress","_packet","addAll","Array","isArray","leave","del","leaveAll","delAll","_onconnect","CONNECT","_onpacket","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","_anyListeners","listeners","slice","listener","dispatch","self","sent","prototype","arguments","get","_onclose","_onerror","err","emitReserved","reason","description","persistSession","_cleanup","_remove","_error","CONNECT_ERROR","disconnect","close","_disconnect","volatile","local","event","run","process","nextTick","emitUntyped","use","fn","i","disconnected","socketRooms","onAny","prependAny","unshift","offAny","splice","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing","BroadcastOperator"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = exports.RESERVED_EVENTS = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst typed_events_1 = require(\"./typed-events\");\nconst base64id_1 = __importDefault(require(\"base64id\"));\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\nconst debug = (0, debug_1.default)(\"socket.io:socket\");\nconst RECOVERABLE_DISCONNECT_REASONS = new Set([\n    \"transport error\",\n    \"transport close\",\n    \"forced close\",\n    \"ping timeout\",\n    \"server shutting down\",\n    \"forced server close\",\n]);\nexports.RESERVED_EVENTS = new Set([\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\",\n]);\nfunction noop() { }\n/**\n * This is the main object for interacting with a client.\n *\n * A Socket belongs to a given {@link Namespace} and uses an underlying {@link Client} to communicate.\n *\n * Within each {@link Namespace}, you can also define arbitrary channels (called \"rooms\") that the {@link Socket} can\n * join and leave. That provides a convenient way to broadcast to a group of socket instances.\n *\n * @example\n * io.on(\"connection\", (socket) => {\n *   console.log(`socket ${socket.id} connected`);\n *\n *   // send an event to the client\n *   socket.emit(\"foo\", \"bar\");\n *\n *   socket.on(\"foobar\", () => {\n *     // an event was received from the client\n *   });\n *\n *   // join the room named \"room1\"\n *   socket.join(\"room1\");\n *\n *   // broadcast to everyone in the room named \"room1\"\n *   io.to(\"room1\").emit(\"hello\");\n *\n *   // upon disconnection\n *   socket.on(\"disconnect\", (reason) => {\n *     console.log(`socket ${socket.id} disconnected due to ${reason}`);\n *   });\n * });\n */\nclass Socket extends typed_events_1.StrictEventEmitter {\n    /**\n     * Interface to a `Client` for a given `Namespace`.\n     *\n     * @param {Namespace} nsp\n     * @param {Client} client\n     * @param {Object} auth\n     * @package\n     */\n    constructor(nsp, client, auth, previousSession) {\n        super();\n        this.nsp = nsp;\n        this.client = client;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted to the client, the data attribute and the rooms will be restored.\n         */\n        this.recovered = false;\n        /**\n         * Additional information that can be attached to the Socket instance and which will be used in the\n         * {@link Server.fetchSockets()} method.\n         */\n        this.data = {};\n        /**\n         * Whether the socket is currently connected or not.\n         *\n         * @example\n         * io.use((socket, next) => {\n         *   console.log(socket.connected); // false\n         *   next();\n         * });\n         *\n         * io.on(\"connection\", (socket) => {\n         *   console.log(socket.connected); // true\n         * });\n         */\n        this.connected = false;\n        this.acks = new Map();\n        this.fns = [];\n        this.flags = {};\n        this.server = nsp.server;\n        this.adapter = this.nsp.adapter;\n        if (previousSession) {\n            this.id = previousSession.sid;\n            this.pid = previousSession.pid;\n            previousSession.rooms.forEach((room) => this.join(room));\n            this.data = previousSession.data;\n            previousSession.missedPackets.forEach((packet) => {\n                this.packet({\n                    type: socket_io_parser_1.PacketType.EVENT,\n                    data: packet,\n                });\n            });\n            this.recovered = true;\n        }\n        else {\n            if (client.conn.protocol === 3) {\n                // @ts-ignore\n                this.id = nsp.name !== \"/\" ? nsp.name + \"#\" + client.id : client.id;\n            }\n            else {\n                this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n            }\n            if (this.server._opts.connectionStateRecovery) {\n                this.pid = base64id_1.default.generateId();\n            }\n        }\n        this.handshake = this.buildHandshake(auth);\n        // prevents crash when the socket receives an \"error\" event without listener\n        this.on(\"error\", noop);\n    }\n    /**\n     * Builds the `handshake` BC object\n     *\n     * @private\n     */\n    buildHandshake(auth) {\n        var _a, _b, _c, _d;\n        return {\n            headers: ((_a = this.request) === null || _a === void 0 ? void 0 : _a.headers) || {},\n            time: new Date() + \"\",\n            address: this.conn.remoteAddress,\n            xdomain: !!((_b = this.request) === null || _b === void 0 ? void 0 : _b.headers.origin),\n            // @ts-ignore\n            secure: !this.request || !!this.request.connection.encrypted,\n            issued: +new Date(),\n            url: (_c = this.request) === null || _c === void 0 ? void 0 : _c.url,\n            // @ts-ignore\n            query: ((_d = this.request) === null || _d === void 0 ? void 0 : _d._query) || {},\n            auth,\n        };\n    }\n    /**\n     * Emits to this client.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.emit(\"hello\", \"world\");\n     *\n     *   // all serializable datastructures are supported (no need to call JSON.stringify)\n     *   socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Buffer.from([6]) });\n     *\n     *   // with an acknowledgement from the client\n     *   socket.emit(\"hello\", \"world\", (val) => {\n     *     // ...\n     *   });\n     * });\n     *\n     * @return Always returns `true`.\n     */\n    emit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${String(ev)}\" is a reserved event name`);\n        }\n        const data = [ev, ...args];\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: data,\n        };\n        // access last argument to see if it's an ACK callback\n        if (typeof data[data.length - 1] === \"function\") {\n            const id = this.nsp._ids++;\n            debug(\"emitting packet with ack id %d\", id);\n            this.registerAckCallback(id, data.pop());\n            packet.id = id;\n        }\n        const flags = Object.assign({}, this.flags);\n        this.flags = {};\n        // @ts-ignore\n        if (this.nsp.server.opts.connectionStateRecovery) {\n            // this ensures the packet is stored and can be transmitted upon reconnection\n            this.adapter.broadcast(packet, {\n                rooms: new Set([this.id]),\n                except: new Set(),\n                flags,\n            });\n        }\n        else {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet, flags);\n        }\n        return true;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * io.on(\"connection\", async (socket) => {\n     *   // without timeout\n     *   const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     *   // with a specific timeout\n     *   try {\n     *     const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     *   } catch (err) {\n     *     // the client did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @return a Promise that will be fulfilled when the client acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        // the timeout flag is optional\n        const withErr = this.flags.timeout !== undefined;\n        return new Promise((resolve, reject) => {\n            args.push((arg1, arg2) => {\n                if (withErr) {\n                    return arg1 ? reject(arg1) : resolve(arg2);\n                }\n                else {\n                    return resolve(arg1);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * @private\n     */\n    registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks.set(id, ack);\n            return;\n        }\n        const timer = setTimeout(() => {\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n            this.acks.delete(id);\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks.set(id, (...args) => {\n            clearTimeout(timer);\n            ack.apply(this, [null, ...args]);\n        });\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients in the “room-101” room, except this socket\n     *   socket.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     *   // the code above is equivalent to:\n     *   io.to(\"room-101\").except(socket.id).emit(\"foo\", \"bar\");\n     *\n     *   // with an array of rooms (a client will be notified at most once)\n     *   socket.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     *   // with multiple chained calls\n     *   socket.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    to(room) {\n        return this.newBroadcastOperator().to(room);\n    }\n    /**\n     * Targets a room when broadcasting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // disconnect all clients in the \"room-101\" room, except this socket\n     *   socket.in(\"room-101\").disconnectSockets();\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    in(room) {\n        return this.newBroadcastOperator().in(room);\n    }\n    /**\n     * Excludes a room when broadcasting.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     *   // and this socket\n     *   socket.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     *   // with an array of rooms\n     *   socket.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     *   // with multiple chained calls\n     *   socket.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    except(room) {\n        return this.newBroadcastOperator().except(room);\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.send(\"hello\");\n     *\n     *   // this is equivalent to\n     *   socket.emit(\"message\", \"hello\");\n     * });\n     *\n     * @return self\n     */\n    send(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a `message` event. Alias of {@link send}.\n     *\n     * @return self\n     */\n    write(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param {Object} packet - packet object\n     * @param {Object} opts - options\n     * @private\n     */\n    packet(packet, opts = {}) {\n        packet.nsp = this.nsp.name;\n        opts.compress = false !== opts.compress;\n        this.client._packet(packet, opts);\n    }\n    /**\n     * Joins a room.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // join a single room\n     *   socket.join(\"room1\");\n     *\n     *   // join multiple rooms\n     *   socket.join([\"room1\", \"room2\"]);\n     * });\n     *\n     * @param {String|Array} rooms - room or array of rooms\n     * @return a Promise or nothing, depending on the adapter\n     */\n    join(rooms) {\n        debug(\"join room %s\", rooms);\n        return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n    }\n    /**\n     * Leaves a room.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // leave a single room\n     *   socket.leave(\"room1\");\n     *\n     *   // leave multiple rooms\n     *   socket.leave(\"room1\").leave(\"room2\");\n     * });\n     *\n     * @param {String} room\n     * @return a Promise or nothing, depending on the adapter\n     */\n    leave(room) {\n        debug(\"leave room %s\", room);\n        return this.adapter.del(this.id, room);\n    }\n    /**\n     * Leave all rooms.\n     *\n     * @private\n     */\n    leaveAll() {\n        this.adapter.delAll(this.id);\n    }\n    /**\n     * Called by `Namespace` upon successful\n     * middleware execution (ie: authorization).\n     * Socket is added to namespace array before\n     * call to join, so adapters can access it.\n     *\n     * @private\n     */\n    _onconnect() {\n        debug(\"socket connected - writing packet\");\n        this.connected = true;\n        this.join(this.id);\n        if (this.conn.protocol === 3) {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT });\n        }\n        else {\n            this.packet({\n                type: socket_io_parser_1.PacketType.CONNECT,\n                data: { sid: this.id, pid: this.pid },\n            });\n        }\n    }\n    /**\n     * Called with each packet. Called by `Client`.\n     *\n     * @param {Object} packet\n     * @private\n     */\n    _onpacket(packet) {\n        debug(\"got packet %j\", packet);\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n        }\n    }\n    /**\n     * Called upon event packet.\n     *\n     * @param {Packet} packet - packet object\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        this.dispatch(args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @param {Number} id - packet id\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function () {\n            // prevent double callbacks\n            if (sent)\n                return;\n            const args = Array.prototype.slice.call(arguments);\n            debug(\"sending ack %j\", args);\n            self.packet({\n                id: id,\n                type: socket_io_parser_1.PacketType.ACK,\n                data: args,\n            });\n            sent = true;\n        };\n    }\n    /**\n     * Called upon ack packet.\n     *\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks.get(packet.id);\n        if (\"function\" == typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            this.acks.delete(packet.id);\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon client disconnect packet.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"got disconnect packet\");\n        this._onclose(\"client namespace disconnect\");\n    }\n    /**\n     * Handles a client error.\n     *\n     * @private\n     */\n    _onerror(err) {\n        // FIXME the meaning of the \"error\" event is overloaded:\n        //  - it can be sent by the client (`socket.emit(\"error\")`)\n        //  - it can be emitted when the connection encounters an error (an invalid packet for example)\n        //  - it can be emitted when a packet is rejected in a middleware (`socket.use()`)\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Called upon closing. Called by `Client`.\n     *\n     * @param {String} reason\n     * @param description\n     * @throw {Error} optional error object\n     *\n     * @private\n     */\n    _onclose(reason, description) {\n        if (!this.connected)\n            return this;\n        debug(\"closing socket - reason %s\", reason);\n        this.emitReserved(\"disconnecting\", reason, description);\n        if (this.server._opts.connectionStateRecovery &&\n            RECOVERABLE_DISCONNECT_REASONS.has(reason)) {\n            debug(\"connection state recovery is enabled for sid %s\", this.id);\n            this.adapter.persistSession({\n                sid: this.id,\n                pid: this.pid,\n                rooms: [...this.rooms],\n                data: this.data,\n            });\n        }\n        this._cleanup();\n        this.client._remove(this);\n        this.connected = false;\n        this.emitReserved(\"disconnect\", reason, description);\n        return;\n    }\n    /**\n     * Makes the socket leave all the rooms it was part of and prevents it from joining any other room\n     *\n     * @private\n     */\n    _cleanup() {\n        this.leaveAll();\n        this.nsp._remove(this);\n        this.join = noop;\n    }\n    /**\n     * Produces an `error` packet.\n     *\n     * @param {Object} err - error object\n     *\n     * @private\n     */\n    _error(err) {\n        this.packet({ type: socket_io_parser_1.PacketType.CONNECT_ERROR, data: err });\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // disconnect this socket (the connection might be kept alive for other namespaces)\n     *   socket.disconnect();\n     *\n     *   // disconnect this socket and close the underlying connection\n     *   socket.disconnect(true);\n     * })\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return self\n     */\n    disconnect(close = false) {\n        if (!this.connected)\n            return this;\n        if (close) {\n            this.client._disconnect();\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n            this._onclose(\"server namespace disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.compress(false).emit(\"hello\");\n     * });\n     *\n     * @param {Boolean} compress - if `true`, compresses the sending data\n     * @return {Socket} self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.volatile.emit(\"hello\"); // the client may or may not receive it\n     * });\n     *\n     * @return {Socket} self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n     * sender.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients, except this socket\n     *   socket.broadcast.emit(\"foo\", \"bar\");\n     * });\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get broadcast() {\n        return this.newBroadcastOperator();\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients on this node, except this socket\n     *   socket.local.emit(\"foo\", \"bar\");\n     * });\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get local() {\n        return this.newBroadcastOperator().local;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the client:\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.timeout(5000).emit(\"my-event\", (err) => {\n     *     if (err) {\n     *       // the client did not acknowledge the event in the given delay\n     *     }\n     *   });\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Dispatch incoming event to socket listeners.\n     *\n     * @param {Array} event - event that will get emitted\n     * @private\n     */\n    dispatch(event) {\n        debug(\"dispatching an event %j\", event);\n        this.run(event, (err) => {\n            process.nextTick(() => {\n                if (err) {\n                    return this._onerror(err);\n                }\n                if (this.connected) {\n                    super.emitUntyped.apply(this, event);\n                }\n                else {\n                    debug(\"ignore packet received after disconnection\");\n                }\n            });\n        });\n    }\n    /**\n     * Sets up socket middleware.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.use(([event, ...args], next) => {\n     *     if (isUnauthorized(event)) {\n     *       return next(new Error(\"unauthorized event\"));\n     *     }\n     *     // do not forget to call next\n     *     next();\n     *   });\n     *\n     *   socket.on(\"error\", (err) => {\n     *     if (err && err.message === \"unauthorized event\") {\n     *       socket.disconnect();\n     *     }\n     *   });\n     * });\n     *\n     * @param {Function} fn - middleware function (event, next)\n     * @return {Socket} self\n     */\n    use(fn) {\n        this.fns.push(fn);\n        return this;\n    }\n    /**\n     * Executes the middleware for an incoming event.\n     *\n     * @param {Array} event - event that will get emitted\n     * @param {Function} fn - last fn call in the middleware\n     * @private\n     */\n    run(event, fn) {\n        const fns = this.fns.slice(0);\n        if (!fns.length)\n            return fn(null);\n        function run(i) {\n            fns[i](event, function (err) {\n                // upon error, short-circuit\n                if (err)\n                    return fn(err);\n                // if no middleware left, summon callback\n                if (!fns[i + 1])\n                    return fn(null);\n                // go on to next\n                run(i + 1);\n            });\n        }\n        run(0);\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * A reference to the request that originated the underlying Engine.IO Socket.\n     */\n    get request() {\n        return this.client.request;\n    }\n    /**\n     * A reference to the underlying Client transport connection (Engine.IO Socket object).\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   console.log(socket.conn.transport.name); // prints \"polling\" or \"websocket\"\n     *\n     *   socket.conn.once(\"upgrade\", () => {\n     *     console.log(socket.conn.transport.name); // prints \"websocket\"\n     *   });\n     * });\n     */\n    get conn() {\n        return this.client.conn;\n    }\n    /**\n     * Returns the rooms the socket is currently in.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   console.log(socket.rooms); // Set { <socket.id> }\n     *\n     *   socket.join(\"room1\");\n     *\n     *   console.log(socket.rooms); // Set { <socket.id>, \"room1\" }\n     * });\n     */\n    get rooms() {\n        return this.adapter.socketRooms(this.id) || new Set();\n    }\n    /**\n     * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n     * the callback.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.onAny((event, ...args) => {\n     *     console.log(`got event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n     * the callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is received.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   const catchAllListener = (event, ...args) => {\n     *     console.log(`got event ${event}`);\n     *   }\n     *\n     *   socket.onAny(catchAllListener);\n     *\n     *   // remove a specific listener\n     *   socket.offAny(catchAllListener);\n     *\n     *   // or remove all listeners\n     *   socket.offAny();\n     * });\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is sent. The event name is passed as the first argument to\n     * the callback.\n     *\n     * Note: acknowledgements sent to the client are not included.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.onAnyOutgoing((event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.prependAnyOutgoing((event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is sent.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   const catchAllListener = (event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   }\n     *\n     *   socket.onAnyOutgoing(catchAllListener);\n     *\n     *   // remove a specific listener\n     *   socket.offAnyOutgoing(catchAllListener);\n     *\n     *   // or remove all listeners\n     *   socket.offAnyOutgoing();\n     * });\n     *\n     * @param listener - the catch-all listener\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent (emit or broadcast)\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n    newBroadcastOperator() {\n        const flags = Object.assign({}, this.flags);\n        this.flags = {};\n        return new broadcast_operator_1.BroadcastOperator(this.adapter, new Set(), new Set([this.id]), flags);\n    }\n}\nexports.Socket = Socket;\n"]},"metadata":{},"sourceType":"script"}