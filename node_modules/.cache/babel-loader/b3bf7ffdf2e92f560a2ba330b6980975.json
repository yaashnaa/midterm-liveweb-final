{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebSocket = void 0;\n\nconst transport_1 = require(\"../transport\");\n\nconst debug_1 = require(\"debug\");\n\nconst debug = (0, debug_1.default)(\"engine:ws\");\n\nclass WebSocket extends transport_1.Transport {\n  /**\n   * WebSocket transport\n   *\n   * @param req\n   * @api public\n   */\n  constructor(req) {\n    super(req);\n    this.writable = false;\n    this.perMessageDeflate = null;\n  }\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n\n  get name() {\n    return \"websocket\";\n  }\n  /**\n   * Advertise upgrade support.\n   *\n   * @api public\n   */\n\n\n  get handlesUpgrades() {\n    return true;\n  }\n  /**\n   * Advertise framing support.\n   *\n   * @api public\n   */\n\n\n  get supportsFraming() {\n    return true;\n  }\n  /**\n   * Writes a packet payload.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n\n\n  send(packets) {\n    this.writable = false;\n\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const isLast = i + 1 === packets.length;\n\n      const send = data => {\n        const isBinary = typeof data !== \"string\";\n        const compress = this.perMessageDeflate && Buffer.byteLength(data) > this.perMessageDeflate.threshold;\n        debug('writing \"%s\"', data);\n        this.socket.send(data, isBinary, compress);\n\n        if (isLast) {\n          this.writable = true;\n          this.emit(\"drain\");\n        }\n      };\n\n      if (packet.options && typeof packet.options.wsPreEncoded === \"string\") {\n        send(packet.options.wsPreEncoded);\n      } else {\n        this.parser.encodePacket(packet, this.supportsBinary, send);\n      }\n    }\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  doClose(fn) {\n    debug(\"closing\");\n    fn && fn(); // call fn first since socket.end() immediately emits a \"close\" event\n\n    this.socket.end();\n  }\n\n}\n\nexports.WebSocket = WebSocket;","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/engine.io/build/transports-uws/websocket.js"],"names":["Object","defineProperty","exports","value","WebSocket","transport_1","require","debug_1","debug","default","Transport","constructor","req","writable","perMessageDeflate","name","handlesUpgrades","supportsFraming","send","packets","i","length","packet","isLast","data","isBinary","compress","Buffer","byteLength","threshold","socket","emit","options","wsPreEncoded","parser","encodePacket","supportsBinary","doClose","fn","end"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,KAAK,GAAG,CAAC,GAAGD,OAAO,CAACE,OAAZ,EAAqB,WAArB,CAAd;;AACA,MAAML,SAAN,SAAwBC,WAAW,CAACK,SAApC,CAA8C;AAC1C;;;;;;AAMAC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,UAAMA,GAAN;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACH;AACD;;;;;;;AAKA,MAAIC,IAAJ,GAAW;AACP,WAAO,WAAP;AACH;AACD;;;;;;;AAKA,MAAIC,eAAJ,GAAsB;AAClB,WAAO,IAAP;AACH;AACD;;;;;;;AAKA,MAAIC,eAAJ,GAAsB;AAClB,WAAO,IAAP;AACH;AACD;;;;;;;;AAMAC,EAAAA,IAAI,CAACC,OAAD,EAAU;AACV,SAAKN,QAAL,GAAgB,KAAhB;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAME,MAAM,GAAGH,OAAO,CAACC,CAAD,CAAtB;AACA,YAAMG,MAAM,GAAGH,CAAC,GAAG,CAAJ,KAAUD,OAAO,CAACE,MAAjC;;AACA,YAAMH,IAAI,GAAIM,IAAD,IAAU;AACnB,cAAMC,QAAQ,GAAG,OAAOD,IAAP,KAAgB,QAAjC;AACA,cAAME,QAAQ,GAAG,KAAKZ,iBAAL,IACba,MAAM,CAACC,UAAP,CAAkBJ,IAAlB,IAA0B,KAAKV,iBAAL,CAAuBe,SADrD;AAEArB,QAAAA,KAAK,CAAC,cAAD,EAAiBgB,IAAjB,CAAL;AACA,aAAKM,MAAL,CAAYZ,IAAZ,CAAiBM,IAAjB,EAAuBC,QAAvB,EAAiCC,QAAjC;;AACA,YAAIH,MAAJ,EAAY;AACR,eAAKV,QAAL,GAAgB,IAAhB;AACA,eAAKkB,IAAL,CAAU,OAAV;AACH;AACJ,OAVD;;AAWA,UAAIT,MAAM,CAACU,OAAP,IAAkB,OAAOV,MAAM,CAACU,OAAP,CAAeC,YAAtB,KAAuC,QAA7D,EAAuE;AACnEf,QAAAA,IAAI,CAACI,MAAM,CAACU,OAAP,CAAeC,YAAhB,CAAJ;AACH,OAFD,MAGK;AACD,aAAKC,MAAL,CAAYC,YAAZ,CAAyBb,MAAzB,EAAiC,KAAKc,cAAtC,EAAsDlB,IAAtD;AACH;AACJ;AACJ;AACD;;;;;;;AAKAmB,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR9B,IAAAA,KAAK,CAAC,SAAD,CAAL;AACA8B,IAAAA,EAAE,IAAIA,EAAE,EAAR,CAFQ,CAGR;;AACA,SAAKR,MAAL,CAAYS,GAAZ;AACH;;AA5EyC;;AA8E9CrC,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocket = void 0;\nconst transport_1 = require(\"../transport\");\nconst debug_1 = require(\"debug\");\nconst debug = (0, debug_1.default)(\"engine:ws\");\nclass WebSocket extends transport_1.Transport {\n    /**\n     * WebSocket transport\n     *\n     * @param req\n     * @api public\n     */\n    constructor(req) {\n        super(req);\n        this.writable = false;\n        this.perMessageDeflate = null;\n    }\n    /**\n     * Transport name\n     *\n     * @api public\n     */\n    get name() {\n        return \"websocket\";\n    }\n    /**\n     * Advertise upgrade support.\n     *\n     * @api public\n     */\n    get handlesUpgrades() {\n        return true;\n    }\n    /**\n     * Advertise framing support.\n     *\n     * @api public\n     */\n    get supportsFraming() {\n        return true;\n    }\n    /**\n     * Writes a packet payload.\n     *\n     * @param {Array} packets\n     * @api private\n     */\n    send(packets) {\n        this.writable = false;\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const isLast = i + 1 === packets.length;\n            const send = (data) => {\n                const isBinary = typeof data !== \"string\";\n                const compress = this.perMessageDeflate &&\n                    Buffer.byteLength(data) > this.perMessageDeflate.threshold;\n                debug('writing \"%s\"', data);\n                this.socket.send(data, isBinary, compress);\n                if (isLast) {\n                    this.writable = true;\n                    this.emit(\"drain\");\n                }\n            };\n            if (packet.options && typeof packet.options.wsPreEncoded === \"string\") {\n                send(packet.options.wsPreEncoded);\n            }\n            else {\n                this.parser.encodePacket(packet, this.supportsBinary, send);\n            }\n        }\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n    doClose(fn) {\n        debug(\"closing\");\n        fn && fn();\n        // call fn first since socket.end() immediately emits a \"close\" event\n        this.socket.end();\n    }\n}\nexports.WebSocket = WebSocket;\n"]},"metadata":{},"sourceType":"script"}