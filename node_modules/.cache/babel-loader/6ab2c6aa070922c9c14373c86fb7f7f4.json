{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\n\nconst socket_1 = require(\"./socket\");\n\nconst typed_events_1 = require(\"./typed-events\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\n\nconst debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n/**\n * A Namespace is a communication channel that allows you to split the logic of your application over a single shared\n * connection.\n *\n * Each namespace has its own:\n *\n * - event handlers\n *\n * ```\n * io.of(\"/orders\").on(\"connection\", (socket) => {\n *   socket.on(\"order:list\", () => {});\n *   socket.on(\"order:create\", () => {});\n * });\n *\n * io.of(\"/users\").on(\"connection\", (socket) => {\n *   socket.on(\"user:list\", () => {});\n * });\n * ```\n *\n * - rooms\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\");\n *   orderNamespace.to(\"room1\").emit(\"hello\");\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\"); // distinct from the room in the \"orders\" namespace\n *   userNamespace.to(\"room1\").emit(\"holà\");\n * });\n * ```\n *\n * - middlewares\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"orders\" namespace\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"users\" namespace\n * });\n * ```\n */\n\nclass Namespace extends typed_events_1.StrictEventEmitter {\n  /**\n   * Namespace constructor.\n   *\n   * @param server instance\n   * @param name\n   */\n  constructor(server, name) {\n    super();\n    this.sockets = new Map();\n    /** @private */\n\n    this._fns = [];\n    /** @private */\n\n    this._ids = 0;\n    this.server = server;\n    this.name = name;\n\n    this._initAdapter();\n  }\n  /**\n   * Initializes the `Adapter` for this nsp.\n   * Run upon changing adapter by `Server#adapter`\n   * in addition to the constructor.\n   *\n   * @private\n   */\n\n\n  _initAdapter() {\n    // @ts-ignore\n    this.adapter = new (this.server.adapter())(this);\n  }\n  /**\n   * Registers a middleware, which is a function that gets executed for every incoming {@link Socket}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.use((socket, next) => {\n   *   // ...\n   *   next();\n   * });\n   *\n   * @param fn - the middleware function\n   */\n\n\n  use(fn) {\n    this._fns.push(fn);\n\n    return this;\n  }\n  /**\n   * Executes the middleware for an incoming client.\n   *\n   * @param socket - the socket that will get added\n   * @param fn - last fn call in the middleware\n   * @private\n   */\n\n\n  run(socket, fn) {\n    const fns = this._fns.slice(0);\n\n    if (!fns.length) return fn(null);\n\n    function run(i) {\n      fns[i](socket, function (err) {\n        // upon error, short-circuit\n        if (err) return fn(err); // if no middleware left, summon callback\n\n        if (!fns[i + 1]) return fn(null); // go on to next\n\n        run(i + 1);\n      });\n    }\n\n    run(0);\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * myNamespace.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms (a client will be notified at most once)\n   * myNamespace.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * myNamespace.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  to(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n  }\n  /**\n   * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // disconnect all clients in the \"room-101\" room\n   * myNamespace.in(\"room-101\").disconnectSockets();\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  in(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n  }\n  /**\n   * Excludes a room when emitting.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n   * myNamespace.except(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms\n   * myNamespace.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * myNamespace.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  except(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n  }\n  /**\n   * Adds a new client.\n   *\n   * @return {Socket}\n   * @private\n   */\n\n\n  async _add(client, auth, fn) {\n    var _a;\n\n    debug(\"adding socket to nsp %s\", this.name);\n    const socket = await this._createSocket(client, auth);\n\n    if ( // @ts-ignore\n    ((_a = this.server.opts.connectionStateRecovery) === null || _a === void 0 ? void 0 : _a.skipMiddlewares) && socket.recovered && client.conn.readyState === \"open\") {\n      return this._doConnect(socket, fn);\n    }\n\n    this.run(socket, err => {\n      process.nextTick(() => {\n        if (\"open\" !== client.conn.readyState) {\n          debug(\"next called after client was closed - ignoring socket\");\n\n          socket._cleanup();\n\n          return;\n        }\n\n        if (err) {\n          debug(\"middleware error, sending CONNECT_ERROR packet to the client\");\n\n          socket._cleanup();\n\n          if (client.conn.protocol === 3) {\n            return socket._error(err.data || err.message);\n          } else {\n            return socket._error({\n              message: err.message,\n              data: err.data\n            });\n          }\n        }\n\n        this._doConnect(socket, fn);\n      });\n    });\n  }\n\n  async _createSocket(client, auth) {\n    const sessionId = auth.pid;\n    const offset = auth.offset;\n\n    if ( // @ts-ignore\n    this.server.opts.connectionStateRecovery && typeof sessionId === \"string\" && typeof offset === \"string\") {\n      let session;\n\n      try {\n        session = await this.adapter.restoreSession(sessionId, offset);\n      } catch (e) {\n        debug(\"error while restoring session: %s\", e);\n      }\n\n      if (session) {\n        debug(\"connection state recovered for sid %s\", session.sid);\n        return new socket_1.Socket(this, client, auth, session);\n      }\n    }\n\n    return new socket_1.Socket(this, client, auth);\n  }\n\n  _doConnect(socket, fn) {\n    // track socket\n    this.sockets.set(socket.id, socket); // it's paramount that the internal `onconnect` logic\n    // fires before user-set events to prevent state order\n    // violations (such as a disconnection before the connection\n    // logic is complete)\n\n    socket._onconnect();\n\n    if (fn) fn(socket); // fire user-set events\n\n    this.emitReserved(\"connect\", socket);\n    this.emitReserved(\"connection\", socket);\n  }\n  /**\n   * Removes a client. Called by each `Socket`.\n   *\n   * @private\n   */\n\n\n  _remove(socket) {\n    if (this.sockets.has(socket.id)) {\n      this.sockets.delete(socket.id);\n    } else {\n      debug(\"ignoring remove for %s\", socket.id);\n    }\n  }\n  /**\n   * Emits to all connected clients.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.emit(\"hello\", \"world\");\n   *\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\n   * myNamespace.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n   *\n   * // with an acknowledgement from the clients\n   * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @return Always true\n   */\n\n\n  emit(ev, ...args) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n  }\n  /**\n   * Emits an event and waits for an acknowledgement from all clients.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * try {\n   *   const responses = await myNamespace.timeout(1000).emitWithAck(\"some-event\");\n   *   console.log(responses); // one response per client\n   * } catch (e) {\n   *   // some clients did not acknowledge the event in the given delay\n   * }\n   *\n   * @return a Promise that will be fulfilled when all clients have acknowledged the event\n   */\n\n\n  emitWithAck(ev, ...args) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).emitWithAck(ev, ...args);\n  }\n  /**\n   * Sends a `message` event to all clients.\n   *\n   * This method mimics the WebSocket.send() method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.send(\"hello\");\n   *\n   * // this is equivalent to\n   * myNamespace.emit(\"message\", \"hello\");\n   *\n   * @return self\n   */\n\n\n  send(...args) {\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a `message` event to all clients. Sends a `message` event. Alias of {@link send}.\n   *\n   * @return self\n   */\n\n\n  write(...args) {\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a message to the other Socket.IO servers of the cluster.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.serverSideEmit(\"hello\", \"world\");\n   *\n   * myNamespace.on(\"hello\", (arg1) => {\n   *   console.log(arg1); // prints \"world\"\n   * });\n   *\n   * // acknowledgements (without binary content) are supported too:\n   * myNamespace.serverSideEmit(\"ping\", (err, responses) => {\n   *  if (err) {\n   *     // some servers did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per server (except the current one)\n   *   }\n   * });\n   *\n   * myNamespace.on(\"ping\", (cb) => {\n   *   cb(\"pong\");\n   * });\n   *\n   * @param ev - the event name\n   * @param args - an array of arguments, which may include an acknowledgement callback at the end\n   */\n\n\n  serverSideEmit(ev, ...args) {\n    if (exports.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${String(ev)}\" is a reserved event name`);\n    }\n\n    args.unshift(ev);\n    this.adapter.serverSideEmit(args);\n    return true;\n  }\n  /**\n   * Sends a message and expect an acknowledgement from the other Socket.IO servers of the cluster.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * try {\n   *   const responses = await myNamespace.serverSideEmitWithAck(\"ping\");\n   *   console.log(responses); // one response per server (except the current one)\n   * } catch (e) {\n   *   // some servers did not acknowledge the event in the given delay\n   * }\n   *\n   * @param ev - the event name\n   * @param args - an array of arguments\n   *\n   * @return a Promise that will be fulfilled when all servers have acknowledged the event\n   */\n\n\n  serverSideEmitWithAck(ev, ...args) {\n    return new Promise((resolve, reject) => {\n      args.push((err, responses) => {\n        if (err) {\n          err.responses = responses;\n          return reject(err);\n        } else {\n          return resolve(responses);\n        }\n      });\n      this.serverSideEmit(ev, ...args);\n    });\n  }\n  /**\n   * Called when a packet is received from another Socket.IO server\n   *\n   * @param args - an array of arguments, which may include an acknowledgement callback at the end\n   *\n   * @private\n   */\n\n\n  _onServerSideEmit(args) {\n    super.emitUntyped.apply(this, args);\n  }\n  /**\n   * Gets a list of clients.\n   *\n   * @deprecated this method will be removed in the next major release, please use {@link Namespace#serverSideEmit} or\n   * {@link Namespace#fetchSockets} instead.\n   */\n\n\n  allSockets() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   */\n\n\n  compress(compress) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.volatile.emit(\"hello\"); // the clients may or may not receive it\n   *\n   * @return self\n   */\n\n\n  get volatile() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the “foo” event will be broadcast to all connected clients on this node\n   * myNamespace.local.emit(\"foo\", \"bar\");\n   *\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  get local() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @param timeout\n   */\n\n\n  timeout(timeout) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(timeout);\n  }\n  /**\n   * Returns the matching socket instances.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // return all Socket instances\n   * const sockets = await myNamespace.fetchSockets();\n   *\n   * // return all Socket instances in the \"room1\" room\n   * const sockets = await myNamespace.in(\"room1\").fetchSockets();\n   *\n   * for (const socket of sockets) {\n   *   console.log(socket.id);\n   *   console.log(socket.handshake);\n   *   console.log(socket.rooms);\n   *   console.log(socket.data);\n   *\n   *   socket.emit(\"hello\");\n   *   socket.join(\"room1\");\n   *   socket.leave(\"room2\");\n   *   socket.disconnect();\n   * }\n   */\n\n\n  fetchSockets() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances join the \"room1\" room\n   * myNamespace.socketsJoin(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n   * myNamespace.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n\n\n  socketsJoin(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances leave the \"room1\" room\n   * myNamespace.socketsLeave(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n   * myNamespace.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n\n\n  socketsLeave(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n  }\n  /**\n   * Makes the matching socket instances disconnect.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n   * myNamespace.disconnectSockets();\n   *\n   * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n   * myNamespace.in(\"room1\").disconnectSockets(true);\n   *\n   * @param close - whether to close the underlying connection\n   */\n\n\n  disconnectSockets(close = false) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n  }\n\n}\n\nexports.Namespace = Namespace;","map":{"version":3,"sources":["/Users/yashna/Desktop/Llive-code-editor-test/React-CodePen-Clone/node_modules/socket.io/dist/namespace.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Namespace","RESERVED_EVENTS","socket_1","require","typed_events_1","debug_1","broadcast_operator_1","debug","default","Set","StrictEventEmitter","constructor","server","name","sockets","Map","_fns","_ids","_initAdapter","adapter","use","fn","push","run","socket","fns","slice","length","i","err","to","room","BroadcastOperator","in","except","_add","client","auth","_a","_createSocket","opts","connectionStateRecovery","skipMiddlewares","recovered","conn","readyState","_doConnect","process","nextTick","_cleanup","protocol","_error","data","message","sessionId","pid","offset","session","restoreSession","e","sid","Socket","set","id","_onconnect","emitReserved","_remove","has","delete","emit","ev","args","emitWithAck","send","write","serverSideEmit","Error","String","unshift","serverSideEmitWithAck","Promise","resolve","reject","responses","_onServerSideEmit","emitUntyped","apply","allSockets","compress","volatile","local","timeout","fetchSockets","socketsJoin","socketsLeave","disconnectSockets","close"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\nconst socket_1 = require(\"./socket\");\nconst typed_events_1 = require(\"./typed-events\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\nconst debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n/**\n * A Namespace is a communication channel that allows you to split the logic of your application over a single shared\n * connection.\n *\n * Each namespace has its own:\n *\n * - event handlers\n *\n * ```\n * io.of(\"/orders\").on(\"connection\", (socket) => {\n *   socket.on(\"order:list\", () => {});\n *   socket.on(\"order:create\", () => {});\n * });\n *\n * io.of(\"/users\").on(\"connection\", (socket) => {\n *   socket.on(\"user:list\", () => {});\n * });\n * ```\n *\n * - rooms\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\");\n *   orderNamespace.to(\"room1\").emit(\"hello\");\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\"); // distinct from the room in the \"orders\" namespace\n *   userNamespace.to(\"room1\").emit(\"holà\");\n * });\n * ```\n *\n * - middlewares\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"orders\" namespace\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"users\" namespace\n * });\n * ```\n */\nclass Namespace extends typed_events_1.StrictEventEmitter {\n    /**\n     * Namespace constructor.\n     *\n     * @param server instance\n     * @param name\n     */\n    constructor(server, name) {\n        super();\n        this.sockets = new Map();\n        /** @private */\n        this._fns = [];\n        /** @private */\n        this._ids = 0;\n        this.server = server;\n        this.name = name;\n        this._initAdapter();\n    }\n    /**\n     * Initializes the `Adapter` for this nsp.\n     * Run upon changing adapter by `Server#adapter`\n     * in addition to the constructor.\n     *\n     * @private\n     */\n    _initAdapter() {\n        // @ts-ignore\n        this.adapter = new (this.server.adapter())(this);\n    }\n    /**\n     * Registers a middleware, which is a function that gets executed for every incoming {@link Socket}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.use((socket, next) => {\n     *   // ...\n     *   next();\n     * });\n     *\n     * @param fn - the middleware function\n     */\n    use(fn) {\n        this._fns.push(fn);\n        return this;\n    }\n    /**\n     * Executes the middleware for an incoming client.\n     *\n     * @param socket - the socket that will get added\n     * @param fn - last fn call in the middleware\n     * @private\n     */\n    run(socket, fn) {\n        const fns = this._fns.slice(0);\n        if (!fns.length)\n            return fn(null);\n        function run(i) {\n            fns[i](socket, function (err) {\n                // upon error, short-circuit\n                if (err)\n                    return fn(err);\n                // if no middleware left, summon callback\n                if (!fns[i + 1])\n                    return fn(null);\n                // go on to next\n                run(i + 1);\n            });\n        }\n        run(0);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * myNamespace.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms (a client will be notified at most once)\n     * myNamespace.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * myNamespace.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    to(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n    }\n    /**\n     * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // disconnect all clients in the \"room-101\" room\n     * myNamespace.in(\"room-101\").disconnectSockets();\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    in(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     * myNamespace.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms\n     * myNamespace.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * myNamespace.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    except(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n    }\n    /**\n     * Adds a new client.\n     *\n     * @return {Socket}\n     * @private\n     */\n    async _add(client, auth, fn) {\n        var _a;\n        debug(\"adding socket to nsp %s\", this.name);\n        const socket = await this._createSocket(client, auth);\n        if (\n        // @ts-ignore\n        ((_a = this.server.opts.connectionStateRecovery) === null || _a === void 0 ? void 0 : _a.skipMiddlewares) &&\n            socket.recovered &&\n            client.conn.readyState === \"open\") {\n            return this._doConnect(socket, fn);\n        }\n        this.run(socket, (err) => {\n            process.nextTick(() => {\n                if (\"open\" !== client.conn.readyState) {\n                    debug(\"next called after client was closed - ignoring socket\");\n                    socket._cleanup();\n                    return;\n                }\n                if (err) {\n                    debug(\"middleware error, sending CONNECT_ERROR packet to the client\");\n                    socket._cleanup();\n                    if (client.conn.protocol === 3) {\n                        return socket._error(err.data || err.message);\n                    }\n                    else {\n                        return socket._error({\n                            message: err.message,\n                            data: err.data,\n                        });\n                    }\n                }\n                this._doConnect(socket, fn);\n            });\n        });\n    }\n    async _createSocket(client, auth) {\n        const sessionId = auth.pid;\n        const offset = auth.offset;\n        if (\n        // @ts-ignore\n        this.server.opts.connectionStateRecovery &&\n            typeof sessionId === \"string\" &&\n            typeof offset === \"string\") {\n            let session;\n            try {\n                session = await this.adapter.restoreSession(sessionId, offset);\n            }\n            catch (e) {\n                debug(\"error while restoring session: %s\", e);\n            }\n            if (session) {\n                debug(\"connection state recovered for sid %s\", session.sid);\n                return new socket_1.Socket(this, client, auth, session);\n            }\n        }\n        return new socket_1.Socket(this, client, auth);\n    }\n    _doConnect(socket, fn) {\n        // track socket\n        this.sockets.set(socket.id, socket);\n        // it's paramount that the internal `onconnect` logic\n        // fires before user-set events to prevent state order\n        // violations (such as a disconnection before the connection\n        // logic is complete)\n        socket._onconnect();\n        if (fn)\n            fn(socket);\n        // fire user-set events\n        this.emitReserved(\"connect\", socket);\n        this.emitReserved(\"connection\", socket);\n    }\n    /**\n     * Removes a client. Called by each `Socket`.\n     *\n     * @private\n     */\n    _remove(socket) {\n        if (this.sockets.has(socket.id)) {\n            this.sockets.delete(socket.id);\n        }\n        else {\n            debug(\"ignoring remove for %s\", socket.id);\n        }\n    }\n    /**\n     * Emits to all connected clients.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * myNamespace.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the clients\n     * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @return Always true\n     */\n    emit(ev, ...args) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n    }\n    /**\n     * Emits an event and waits for an acknowledgement from all clients.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * try {\n     *   const responses = await myNamespace.timeout(1000).emitWithAck(\"some-event\");\n     *   console.log(responses); // one response per client\n     * } catch (e) {\n     *   // some clients did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when all clients have acknowledged the event\n     */\n    emitWithAck(ev, ...args) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).emitWithAck(ev, ...args);\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.send(\"hello\");\n     *\n     * // this is equivalent to\n     * myNamespace.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a `message` event to all clients. Sends a `message` event. Alias of {@link send}.\n     *\n     * @return self\n     */\n    write(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a message to the other Socket.IO servers of the cluster.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.serverSideEmit(\"hello\", \"world\");\n     *\n     * myNamespace.on(\"hello\", (arg1) => {\n     *   console.log(arg1); // prints \"world\"\n     * });\n     *\n     * // acknowledgements (without binary content) are supported too:\n     * myNamespace.serverSideEmit(\"ping\", (err, responses) => {\n     *  if (err) {\n     *     // some servers did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per server (except the current one)\n     *   }\n     * });\n     *\n     * myNamespace.on(\"ping\", (cb) => {\n     *   cb(\"pong\");\n     * });\n     *\n     * @param ev - the event name\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     */\n    serverSideEmit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${String(ev)}\" is a reserved event name`);\n        }\n        args.unshift(ev);\n        this.adapter.serverSideEmit(args);\n        return true;\n    }\n    /**\n     * Sends a message and expect an acknowledgement from the other Socket.IO servers of the cluster.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * try {\n     *   const responses = await myNamespace.serverSideEmitWithAck(\"ping\");\n     *   console.log(responses); // one response per server (except the current one)\n     * } catch (e) {\n     *   // some servers did not acknowledge the event in the given delay\n     * }\n     *\n     * @param ev - the event name\n     * @param args - an array of arguments\n     *\n     * @return a Promise that will be fulfilled when all servers have acknowledged the event\n     */\n    serverSideEmitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            args.push((err, responses) => {\n                if (err) {\n                    err.responses = responses;\n                    return reject(err);\n                }\n                else {\n                    return resolve(responses);\n                }\n            });\n            this.serverSideEmit(ev, ...args);\n        });\n    }\n    /**\n     * Called when a packet is received from another Socket.IO server\n     *\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     *\n     * @private\n     */\n    _onServerSideEmit(args) {\n        super.emitUntyped.apply(this, args);\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @deprecated this method will be removed in the next major release, please use {@link Namespace#serverSideEmit} or\n     * {@link Namespace#fetchSockets} instead.\n     */\n    allSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.volatile.emit(\"hello\"); // the clients may or may not receive it\n     *\n     * @return self\n     */\n    get volatile() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the “foo” event will be broadcast to all connected clients on this node\n     * myNamespace.local.emit(\"foo\", \"bar\");\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get local() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(timeout);\n    }\n    /**\n     * Returns the matching socket instances.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // return all Socket instances\n     * const sockets = await myNamespace.fetchSockets();\n     *\n     * // return all Socket instances in the \"room1\" room\n     * const sockets = await myNamespace.in(\"room1\").fetchSockets();\n     *\n     * for (const socket of sockets) {\n     *   console.log(socket.id);\n     *   console.log(socket.handshake);\n     *   console.log(socket.rooms);\n     *   console.log(socket.data);\n     *\n     *   socket.emit(\"hello\");\n     *   socket.join(\"room1\");\n     *   socket.leave(\"room2\");\n     *   socket.disconnect();\n     * }\n     */\n    fetchSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances join the \"room1\" room\n     * myNamespace.socketsJoin(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n     * myNamespace.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsJoin(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances leave the \"room1\" room\n     * myNamespace.socketsLeave(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n     * myNamespace.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsLeave(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n    }\n    /**\n     * Makes the matching socket instances disconnect.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n     * myNamespace.disconnectSockets();\n     *\n     * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n     * myNamespace.in(\"room1\").disconnectSockets(true);\n     *\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(close = false) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n    }\n}\nexports.Namespace = Namespace;\n"]},"metadata":{},"sourceType":"script"}